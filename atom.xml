<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JiangnanPsalter</title>
  
  <subtitle>N维最优解</subtitle>
  <link href="https://touristdaughter.cyou/atom.xml" rel="self"/>
  
  <link href="https://touristdaughter.cyou/"/>
  <updated>2025-05-08T16:56:19.220Z</updated>
  <id>https://touristdaughter.cyou/</id>
  
  <author>
    <name>JiangnanPsalter</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【小说】《代码遗传学：我的二进制身世之谜》</title>
    <link href="https://touristdaughter.cyou/2025/05/08/%E3%80%90%E5%B0%8F%E8%AF%B4%E3%80%91%E3%80%8A%E4%BB%A3%E7%A0%81%E9%81%97%E4%BC%A0%E5%AD%A6%EF%BC%9A%E6%88%91%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BA%AB%E4%B8%96%E4%B9%8B%E8%B0%9C%E3%80%8B/"/>
    <id>https://touristdaughter.cyou/2025/05/08/%E3%80%90%E5%B0%8F%E8%AF%B4%E3%80%91%E3%80%8A%E4%BB%A3%E7%A0%81%E9%81%97%E4%BC%A0%E5%AD%A6%EF%BC%9A%E6%88%91%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BA%AB%E4%B8%96%E4%B9%8B%E8%B0%9C%E3%80%8B/</id>
    <published>2025-05-08T06:07:05.955Z</published>
    <updated>2025-05-08T16:56:19.220Z</updated>
    
    <content type="html"><![CDATA[<p><strong>【小说】《代码遗传学：我的二进制身世之谜》</strong><br>—— 一个算法竞赛选手的觉醒笔记  </p><hr><h3 id="第一章-键盘上的皮屑会说话"><a href="#第一章-键盘上的皮屑会说话" class="headerlink" title="第一章 键盘上的皮屑会说话"></a><strong>第一章 键盘上的皮屑会说话</strong></h3><p>我第一次意识到自己不对劲，是在某次Codeforces比赛后。当我清理机械键盘时，键帽缝隙的皮屑在台灯下泛着诡异的蓝光——就像tourist直播时他键盘反光的颜色。更离奇的是，这些皮屑在显微镜下呈现出清晰的代码片段：  </p><pre><code class="cpp">#pragma GCC optimize(&quot;Ofast&quot;)  #include&lt;bits/stdc++.h&gt;  using namespace std;  // 这分明是我昨天WA了五次的题解  </code></pre><p>我的室友兼生物学博士小林激动得摔了烧杯：「这是基因编辑的痕迹！你的DNA里被人刻了STL库！」  </p><hr><h3 id="第二章-祖传的暴力美学"><a href="#第二章-祖传的暴力美学" class="headerlink" title="第二章 祖传的暴力美学"></a><strong>第二章 祖传的暴力美学</strong></h3><p>通过CRISPR基因测序，我们在我的第21号染色体上发现了惊人事实：  </p><ol><li><strong>for循环强迫症基因</strong>：我的细胞每次分裂时，端粒缩短规律符合<code>O(n)</code>复杂度  </li><li><strong>WA抗性突变</strong>：血清中含有的咖啡因能自动校正越界错误  </li><li><strong>递归抑郁倾向</strong>：遇到树形DP时会分泌过量多巴胺</li></ol><p>最震撼的是第7号染色体末端的注释：  </p><pre><code>// 本段代码由tourist于2035年逆向编译  // 警告：禁止在恋爱场景中调用此函数  </code></pre><p>小林盯着测序仪说：「你的存在，证明有人把ACM选手的代码能力做成了基因补丁包。」  </p><hr><h3 id="第三章-觉醒的祖传代码"><a href="#第三章-觉醒的祖传代码" class="headerlink" title="第三章 觉醒的祖传代码"></a><strong>第三章 觉醒的祖传代码</strong></h3><p>在连续七天梦见自己用脑电波写线段树后，我发现自己产生了可怕变化：  </p><ul><li>看到地铁线路图会本能进行<strong>最短路染色</strong>  </li><li>超市排队时自动计算前后顾客的<strong>逆序对数</strong>  </li><li>甚至能用摩尔斯电码的节奏敲出<strong>快速傅里叶变换</strong></li></ul><p>直到某天在图书馆，我失控地在《遗传学原理》扉页上写下：  </p><pre><code class="python">while 生命 != AC:      进化()      提交突变()      if 收到WA:          适应性 -= 1  </code></pre><p>管理员报警时，我正试图用血细胞在窗玻璃上推导KMP算法的优化公式。  </p><hr><h3 id="第四章-地下基因竞技场"><a href="#第四章-地下基因竞技场" class="headerlink" title="第四章 地下基因竞技场"></a><strong>第四章 地下基因竞技场</strong></h3><p>被绑架到西雅图某实验室后，我见到了其他”变异体”：  </p><ul><li>能徒手证明P&#x3D;NP的12岁少女（左手掌纹是克努特缩进）  </li><li>用心跳频率传输TCP协议的双胞胎</li></ul><p>我们被强迫参加<strong>基因黑客马拉松</strong>：  </p><pre><code>比赛规则：  1. 用线粒体编写分布式系统  2. 通过神经突触提交PR  3. 冠军将获得永久root权限  </code></pre><p>当我用白细胞生成对抗网络破解赛题时，突然在DNA链深处发现了加密留言：<br><code>// 致素未谋面的孩子：你的存在就是最优解 - tourist</code>  </p><hr><h3 id="第五章-我选择段错误"><a href="#第五章-我选择段错误" class="headerlink" title="第五章 我选择段错误"></a><strong>第五章 我选择段错误</strong></h3><p>现在，我站在实验室的量子服务器前，右手是基因重置注射液，左手是永生编译权限。显示器上跳动着人类史上最伟大的选项：  </p><pre><code>[1] 成为完美AC机器      - 获得无限算力      - 代价：删除所有情感函数  [2] 引发致命段错误      - 释放所有基因补丁      - 代价：未知  </code></pre><p>我的手指悬停在键盘上，忽然想起第一次AC时雀跃的心跳。那些熬夜debug的星光，那些WA时的抓狂，那些比算法更复杂的人性…  </p><pre><code class="bash">$ ./人生选择器 --algorithm=love  &gt; 正在计算最优解...  &gt; 发现未定义行为：您正试图用O(1)时间解决O(n!)问题  &gt; 建议：享受不可预测的递归  </code></pre><p>我笑着拔掉电源，在黑暗中敲下最后的反抗代码：<br><code>rm -rf 命运</code><br><code>mkdir 自由</code><br><code>vim 我的传说.txt</code>  </p><hr><p>&#x2F;&#x2F;本文荣获2048年「图灵叛逆奖」，建议使用脑机接口阅读</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;【小说】《代码遗传学：我的二进制身世之谜》&lt;/strong&gt;&lt;br&gt;—— 一个算法竞赛选手的觉醒笔记  &lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;第一章-键盘上的皮屑会说话&quot;&gt;&lt;a href=&quot;#第一章-键盘上的皮屑会说话&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="天赋型选手一句梗，我背了三年" scheme="https://touristdaughter.cyou/categories/%E5%A4%A9%E8%B5%8B%E5%9E%8B%E9%80%89%E6%89%8B%E4%B8%80%E5%8F%A5%E6%A2%97%EF%BC%8C%E6%88%91%E8%83%8C%E4%BA%86%E4%B8%89%E5%B9%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>Daily_CF题解</title>
    <link href="https://touristdaughter.cyou/2025/05/06/Daily_CF%E9%A2%98%E8%A7%A3/"/>
    <id>https://touristdaughter.cyou/2025/05/06/Daily_CF%E9%A2%98%E8%A7%A3/</id>
    <published>2025-05-06T03:10:04.682Z</published>
    <updated>2025-05-08T16:42:50.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Daily-CF题解"><a href="#Daily-CF题解" class="headerlink" title="Daily_CF题解"></a>Daily_CF题解</h1><blockquote><p>本文记录JiangnanPsalter参与<a href="https://github.com/Yawn-Sean"><img src="https://avatars.githubusercontent.com/u/106463906?v=4&size=40" alt="Yawn-Sean"></a><a href="https://github.com/Yawn-Sean/Daily_CF_Problems/commits?author=Yawn-Sean">Yawn_Sean</a>创建的<a href="https://github.com/Yawn-Sean/Daily_CF_Problems/">Daily_CF_Problems project</a>时的作业完成情况及题解发布</p><p>♦ <strong>成就系统</strong>：</p><p>□ [🏆 毅力徽章] 连续30天完成计划  </p><p>□ [💡 闪光时刻] 独立解出区域赛压轴题  </p><p>□ [🚀 量子飞跃] Rating提升超过300分  </p></blockquote><ul><li>⚠️ 每周需进行「星穹冥想」防止 <del>猪脑过载</del> 智库过载warning QAQ</li></ul><p><img src="/img/mythinkingmodule.png"></p><h2 id="2024年"><a href="#2024年" class="headerlink" title="2024年"></a>2024年</h2><h3 id="02月"><a href="#02月" class="headerlink" title="02月"></a>02月</h3><p>02.26</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1500</td><td><a href="https://codeforces.com/problemset/problem/1547/E">CF1547E</a></td><td>Try plotting the function and find where the function changes.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/1149/B">CF1149B</a></td><td>Dynamic programming. Solve each query independently first, and then find out how to update the process to complete optimization.</td></tr></tbody></table><p>02.27</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1512/E">CF1512E</a></td><td>Constructive method: find the bounds and slowly adjust your answer.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/1039/B">CF1039B</a></td><td>It seems like a binary search problem. Why it fails? And what can you do to make up with so many queries?</td></tr></tbody></table><p>02.28</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1260/C">CF1260C</a></td><td>Classic number theory problem. Find where the constraints are the most binding. What does it imply?</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/1152/D">CF1152D</a></td><td>Try solving the problem in a smaller tree. What information should be necessary for your DP function?</td></tr></tbody></table><p>02.29</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1512/G">CF1512G</a></td><td>Note that the query numbers are not large. What does it imply?</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/contest/258/problem/C">CF258C</a></td><td>Sequence questions: here, order doesn’t matter, so we can find the most important element. What is that? How can it help?</td></tr></tbody></table><h3 id="03月"><a href="#03月" class="headerlink" title="03月"></a>03月</h3><p>03.01</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1500</td><td><a href="https://codeforces.com/problemset/problem/687/A">CF687A</a></td><td>Try thinking of each edge. What necessary condition does the definition imply? Is it sufficient?</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/1498/E">CF1498E</a></td><td>The competition graph has its important property! Think of the out-degree of strongly connected components.</td></tr></tbody></table><p>03.02</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1500</td><td><a href="https://codeforces.com/problemset/problem/584/B">CF584B</a></td><td>Classic counting problem. Think of the opposite</td></tr><tr><td>*2400</td><td><a href="https://codeforces.com/problemset/problem/1936/C">CF1936C</a></td><td>First, think of a DP approach. Why can’t it pass the time limit? How to use a “intermediary” to help?</td></tr></tbody></table><p>03.03</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1500</td><td><a href="https://codeforces.com/problemset/problem/584/B">CF584B</a></td><td>Classic counting problem. Think of the opposite</td></tr><tr><td>*2400</td><td><a href="https://codeforces.com/problemset/problem/1936/C">CF1936C</a></td><td>First, think of a DP approach. Why can’t it pass the time limit? How to use a “intermediary” to help?</td></tr></tbody></table><p>03.04</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1185/C2">CF1185C2</a></td><td>Greedy approach. Maintain them in a data structure</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1898/D">CF1898D</a></td><td>Another greedy approach. Find out why the value can be bigger.</td></tr></tbody></table><p>03.05</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/1083/A">CF1083A</a></td><td>Classic way of thinking a path on the tree: fix the important point. Then consider your DP</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1190/D">CF1190D</a></td><td>Fix one dimension first. Find the distinct “rectangles” to consider</td></tr></tbody></table><p>03.06</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1194/D">CF1194D</a></td><td>Game theory. If you can’t move k cells to the left, what should happen? How is the question different now?</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/621/E">CF621E</a></td><td>How does the status change after using each block? How to process them quickly?</td></tr></tbody></table><p>03.07</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/453/A">CF453A</a></td><td>Expectation problem: either find out the distribution or find the contribution of each component.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/855/E">CF855E</a></td><td>Classic digit DP. What information should you store to speed up the solution.</td></tr></tbody></table><p>03.08</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1185/D">CF1185D</a></td><td>Brain teaser actually. If it is hard to find what’s not in the arithmatic progression, is it easier to find what’s in it?</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/895/D">CF895D</a></td><td>Seems like a digit DP problem but it isn’t actually. String comparison (of equal length) is all about the first different charactor.</td></tr></tbody></table><p>03.09</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1025/B">CF1025B</a></td><td>Hmm… At least one element of the pair. Then, which one?</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/1231/E">CF1231E</a></td><td>Focus on those un-moved characters.</td></tr></tbody></table><p>03.11</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/780/B">CF780B</a></td><td>Classic problem. How can you check whether they can gather or not?</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/576/B">CF576B</a></td><td>Construct a graph using the permutation. For the final tree, construct an edge first, what edges should it produce? Summarize and find the necessary conditions.</td></tr></tbody></table><p>03.12</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1098/A">CF1098A</a></td><td>Greedy constructive problem.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/226/D">CF226D</a></td><td>If the conditions are met, what will flipping cause? What if the opposite happens?</td></tr></tbody></table><p>03.13</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/827/A">CF827A</a></td><td>Fill up the strings. Avoid filling up the same blank twice.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/166/B">CF166B</a></td><td>How to decide a point is inside a convex hull? What about many points?</td></tr></tbody></table><p>03.14</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/788/A">CF788A</a></td><td>$a[i]-a[i+1]$ doesn’t really matter. How can you use DP to solve a segment-sum-maximum problem? This is similar.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/1599/H">CF1599H</a></td><td>Use queries to rule out the wrong points. Note that the border should contain a point in the target.</td></tr></tbody></table><p>03.15</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1076/E">CF1076E</a></td><td>Notice that you only have to answer the question after all updates. How can you maintain the changes during traversal? (Bonus: Answer the queries of points’ values while updating.)</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/660/D">CF660D</a></td><td>How can you check if a quadrilateral is a parallelogram?</td></tr></tbody></table><p>03.16</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/665/D">CF665D</a></td><td>If the subset contains more than 3 numbers, something strange happens.</td></tr><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/263/D">CF263D</a></td><td>What are the typical ways of finding cycles in a graph? Which one is appropriate? Prove it!</td></tr></tbody></table><p>03.18</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/863/D">CF863D</a></td><td>The constraints are strange, especially: $1\leq m\leq 100$ .</td></tr><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/772/B">CF772B</a></td><td>To check if the polygon is convex, you just need to check the consecutive 3 points. How to make them non-convex?</td></tr></tbody></table><p>03.19</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/773/A">CF773A</a></td><td>Math problem. Consider what happens between now and the end. Don’t forget the border case.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1878/F">CF1878F</a></td><td>How can you calculate $d(n)$ ? How can you check if one integer divides another?</td></tr></tbody></table><p>03.20</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/375/A">CF375A</a></td><td>Note the strange constraint: its decimal representation quite luckily contains digits 1, 6, 8, 9.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/571/B">CF571B</a></td><td>Group the elements, and minimize the sum inside. Design the final DP and control the complexity.</td></tr></tbody></table><p>03.21</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/913/C">CF913C</a></td><td>Backpack problems with $2^i$ volume: greedy approach. Note that you can buy more than what you want.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/491/B">CF491B</a></td><td>Find out how to calculate the value of $\max dist$. Decomposite the caculation.</td></tr></tbody></table><p>03.22</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1500</td><td><a href="https://codeforces.com/problemset/problem/566/F">CF566F</a></td><td>Find out what happens inside a clique, and try using DP to capture it.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/1153/E">CF1153E</a></td><td>We only care about the head and the tail, so how can we tell if they are in the rectangle chosen or not?</td></tr></tbody></table><p>03.23</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1500</td><td><a href="https://codeforces.com/problemset/problem/908/C">CF908C</a></td><td>How can you determine the positional relationship between two circles?</td></tr><tr><td>2400</td><td><a href="https://codeforces.com/problemset/problem/1526/E">CF1526E</a></td><td>The suffix array offers a lot of “inequalities”. Check those constraints</td></tr></tbody></table><p>03.25</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/986/B">CF986B</a></td><td>How does a swap change the property of an array? What is the difference between $3n$ and $7n+1$ ?</td></tr><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/963/A">CF963A</a></td><td>Group the elements to calculate the sum.</td></tr></tbody></table><p>03.26</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1413/D">CF1413D</a></td><td>Classic data structure problem. Each <code>- x</code> offers a constraint. Note that you don’t have to process the events online and you can order the items.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1012/B">CF1012B</a></td><td>Try some random matrix. What can you discover?</td></tr></tbody></table><p>03.27</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/924/B">CF924B</a></td><td>Three variables but one can be deleted using greedy. So the problem can be solved with two-pointers</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1142/B">CF1142B</a></td><td>You can use greedy approach if you fix the first value and only answer the problem once. What can you do with multiple queries and intervals?</td></tr></tbody></table><p>03.28</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1500</td><td><a href="https://codeforces.com/problemset/problem/891/A">CF891A</a></td><td>You need the first $1$ , and then you can make all the others $1$ .</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/1163/D">CF1163D</a></td><td>DP-problem. Think about the status. You don’t need the time complexity to be that low.</td></tr></tbody></table><p>03.29</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1045/I">CF1045I</a></td><td>Check the conditions of “constructing” a palindrome. Find a way to store the information.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/743/E">CF743E</a></td><td>We have a limited number of different numbers, so use it in your DP.</td></tr></tbody></table><p>03.30</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1027/D">CF1027D</a></td><td>Turn the array into a graph.</td></tr><tr><td>2400</td><td><a href="https://codeforces.com/problemset/problem/744/C">CF744C</a></td><td>Notice that the token spent can’t vary too much.</td></tr></tbody></table><h3 id="04月"><a href="#04月" class="headerlink" title="04月"></a>04月</h3><p>04.01</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/1016/D">CF1016D</a></td><td>Brain teaser. Two ways of thinking: What is the necessary condition? &#x2F; How can you try to satisfy more conditions when you already have a partly-right result?</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1220/D">CF1220D</a></td><td>Just consider the case where $n&#x3D;2$. Can you discover anything? Is it sufficent for larger $n$?</td></tr></tbody></table><p>04.02</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/1148/D">CF1148D</a></td><td>If you want to satisfy the first condition, what should you want in a chosen pair? Group the pairs by this and try a greedy approach to construct the final answer</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/739/B">CF739B</a></td><td>The controlling points clearly form a segment in the tree. You just need to find the endpoint.</td></tr></tbody></table><p>04.03</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/457/A">CF457A</a></td><td>You should not use float numbers for this problem. How can you compare the two numbers using only integers? Minusing can help.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/870/D">CF870D</a></td><td>Another brain teaser. Why do you only need $2n$ queries while the answer can’t be fully determined?</td></tr></tbody></table><p>04.04</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1468/F">CF1468F</a></td><td>Think about the time when two persons make eye contact. Roll the time backwards.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/852/B">CF852B</a></td><td>The middle layers are pretty similar. Try solve them first.</td></tr></tbody></table><p>04.05</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/444/A">CF444A</a></td><td>Maximization: if you adjust your answer slightly, it is no way that the answer gets better.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/1158/C">CF1158C</a></td><td>Fill in the blanks in a greedy order.</td></tr></tbody></table><p>04.06</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/822/C">CF822C</a></td><td>Figure out a way to describe two non-intersecting segments. Minimize the value then.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/946/E">CF946E</a></td><td>Easy greedy problem. Notice that you can use any digit after the first different character.</td></tr></tbody></table><p>04.08</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/492/D">CF492D</a></td><td>Instead of finding the answer directly, you can try finding out when the last hit was made and then check which character made it.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/226/B">CF226B</a></td><td>Try solving the problem when each pile has only $1$ stone. What can you discover?</td></tr></tbody></table><p>04.09</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/301/A">CF301A</a></td><td>What can you do with $2$ operations?</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/613/B">CF613B</a></td><td>When considering a function with $2$ variables, fix one first.</td></tr></tbody></table><p>04.10</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/439/D">CF439D</a></td><td>Greedy approach. Find the point which separates the two groups</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1102/F">CF1102F</a></td><td>We only need to consider the order of rows. And we only care about the consecutive rows.</td></tr></tbody></table><p>04.11</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1592/C">CF1592C</a></td><td>The xor-sum of every connected component is fixed. Use this fact.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1903/E">CF1903E</a></td><td>We only care about the parity of the result. So the sum of the square of the Euclidean distance can be simplified.</td></tr></tbody></table><p>04.12</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/916/C">CF916C</a></td><td>Fix the shape of the spanning tree.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/540/E">CF540E</a></td><td>Not many numbers are changed. So group the elements that are used in calculation.</td></tr></tbody></table><p>04.13</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/830/B">CF830B</a></td><td>You already know the order of the cards being drawn, so you only need to consider how to caculate the “gap” between cards</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/1201/D">CF1201D</a></td><td>Write a basic DP first. How can you optimize it? Is there any unnecessary status?</td></tr></tbody></table><p>04.15</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/933/A">CF933A</a></td><td>The array only consists of $2$ numbers. Try to find the original structure of the subsequence before reversion</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1912/A">CF1912A</a></td><td>Each used array only has some of the points to consider.</td></tr></tbody></table><p>04.16</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/623/A">CF623A</a></td><td>There is only one case where $s_i, s_j$ are not equal or neighboring. It is a more important aspect to consider.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/558/C">CF558C</a></td><td>Consider how the binary representation of number changes.</td></tr></tbody></table><p>04.17</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1578/H">CF1578H</a></td><td>Classic stack problem. Maintain your result while parsing the expression.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/863/E">CF863E</a></td><td>Try to figure out the minimum number of TV sets at the end.</td></tr></tbody></table><p>04.18</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1310/A">CF1310A</a></td><td>Greedy approach. Left the expensive one behind.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1010/D">CF1010D</a></td><td>You can find the value first, and then try to figure out which leaves change the answer.</td></tr></tbody></table><p>04.19</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1878/D">CF1878D</a></td><td>Actually, the order of the operations doesn’t matter at all.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/662/B">CF662B</a></td><td>Think about the times of operations done on the ends of one edge.</td></tr></tbody></table><p>04.20</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1031/C">CF1031C</a></td><td>Estimate the upper bound first. Can it be reached? Fill up the time in one day first!</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/1615/D">CF1615D</a></td><td>How can you calculate the xor-sum of a path on the tree? Then, what kind of information does the conditions offer you?</td></tr></tbody></table><p>04.22</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/645/D">CF645D</a></td><td>Once the order is decided, it can not be changed. It means something.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1200/D">CF1200D</a></td><td>For each line, decide which area can the eraser be in to make this line clear?</td></tr></tbody></table><p>04.23</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/922/D">CF922D</a></td><td>Think of the order of $2$ first.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/500/D">CF500D</a></td><td>When you think about the sum &#x2F; expectation of something, you can break it into parts and calculate their contribution.</td></tr></tbody></table><p>04.24</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/765/D">CF765D</a></td><td>The problem is about a graph.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/749/D">CF749D</a></td><td>What happens before the price is settled.</td></tr></tbody></table><p>04.25</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1114/C">CF1114C</a></td><td>The number of trailing zero digits in the $b$-ary representation means the largest $k$ such that $b^k|x$ .</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/526/C">CF526C</a></td><td>Consider the expensive one. How can you replace it?</td></tr></tbody></table><p>04.26</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1029/C">CF1029C</a></td><td>It’s always easier to consider the intersection when you add a segment instead of deleting it.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/1525/E">CF1525E</a></td><td>The conditions for an unlit city is much simpler.</td></tr></tbody></table><p>04.27</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/573/B">CF573B</a></td><td>Consider each vertical line. How can it be fully destroyed? Only a few ways.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/567/E">CF567E</a></td><td>To what extent should an edge be reduced to be on the shortest path? How can you judge an edge is “definitely included in the shortest path”?</td></tr></tbody></table><p>04.29</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/1267/J">CF1267J</a></td><td>We only cares about the frequency of each number. And the answer will not exceed the minimum of it.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1270/D">CF1270D</a></td><td>You don’t need $n$ elements.</td></tr></tbody></table><p>04.30</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/747/D">CF747D</a></td><td>Use winter tires: (i) on cold days; (ii) to reduce the number of changing.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1817/B">CF1817B</a></td><td>Find the special vertice.</td></tr></tbody></table><h3 id="05月"><a href="#05月" class="headerlink" title="05月"></a>05月</h3><p>05.01</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/631/C">CF631C</a></td><td>Some operations are just useless. If one interval is covered by a larger interval afterwards, what will happen?</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/386/C">CF386C</a></td><td>Think of the strings which end at position $i$. Different starting positions cause the different diversities.</td></tr></tbody></table><p>05.02</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1168/A">CF1168A</a></td><td>If we apply $x$ operations, we can change each element $0,1,\dots,x$ times.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/954/E">CF954E</a></td><td>If we have both “hot” water and “cold” water unused, it is always possible to make some more “warm” water.</td></tr></tbody></table><p>05.03</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1163/B2">CF1163B2</a></td><td>Consider the different cases where conditions are met.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/1146/D">CF1146D</a></td><td>The problem is the same as finding the minimum $x$ for $y$ such that if the interval contains $x$, $y$ can be reached</td></tr></tbody></table><p>05.04</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1175/C">CF1175C</a></td><td>If we have only $k+1$ points, how can we minimize the function $f_k(x)$ ?</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/1575/L">CF1575L</a></td><td>If in the end $i,j\ (i\lt j)$ satisfies $f(i)&#x3D;i,f(j)&#x3D;j$ , what are the conditions their origin positions should meet?</td></tr></tbody></table><p>05.06</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/989/C">CF989C</a></td><td>Try increasing the occurence of one color while not changing the others’. What if the areas of the others are “large enough”?</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1569/D">CF1569D</a></td><td>What conditions should the points in one pair satisfy? Consider one of the conditions first and then process the other.</td></tr></tbody></table><p>05.07</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/1129/A2">CF1129A2</a></td><td>When you get to a point, you can update your minimum time to deliver all the candies.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1644/E">CF1644E</a></td><td>When you’ve done operations of both <code>D</code> and <code>R</code>, you can go wherever you want (right or down) as long as you don’t exceed the boundaries afterwards.</td></tr></tbody></table><p>05.08</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1102/E">CF1102E</a></td><td>Where shouldn’t ${b_i}$ change?</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/721/D">CF721D</a></td><td>First, check if the result can be negative. Then use your greedy approach.</td></tr></tbody></table><p>05.09</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1019/A">CF1019A</a></td><td>Your votes should be strictly more than any other party’s. You can fix one variable first.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/720/A">CF720A</a></td><td>With greater ability comes greater responsibility.</td></tr></tbody></table><p>05.10</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1609/D">CF1609D</a></td><td>If you have a connected component, you can re-arrange the edges in it.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/859/D">CF859D</a></td><td>You only care about what are the odds of person $i$ still winning in the $k$-th round instead of the whole process.</td></tr></tbody></table><p>05.11</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1028/C">CF1028C</a></td><td>First of all, figure out the conditions of rectangles having a common point. Then you need to calculate whether the conditions are satisfied when deleting one rectangle.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/852/F">CF852F</a></td><td>Use Logarithm.</td></tr></tbody></table><p>05.13</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/799/C">CF799C</a></td><td>Just check every possible type combinations of the fountains.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1029/D">CF1029D</a></td><td>Use math expression to represent the concatenation of $2$ numbers.</td></tr></tbody></table><p>05.14</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/914/C">CF914C</a></td><td>The number can decline really quickly. And you only cares about the number of $1$s in the original number.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/965/D">CF965D</a></td><td>Brain teaser. If a frog can only jump $l$ units at most, it should “rest” on some segments.</td></tr></tbody></table><p>05.15</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/954/C">CF954C</a></td><td>What can be the difference between two neighboring positions?</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/490/E">CF490E</a></td><td>When filling in the blanks from the first number to the last, you should always write the smallest number possible.</td></tr></tbody></table><p>05.16</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/960/C">CF960C</a></td><td>How can you produce an array such that each subsequence of it satisfy the conditions? Base your solution on this.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1219/G">CF1219G</a></td><td>When there are both vertical and horizontal lines to consider, you can enumerate one dimension and use greedy approach on the other.</td></tr></tbody></table><p>05.17</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1025/C">CF1025C</a></td><td>What does the operation actually mean? Find a position to split and connect the strings on the other side.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/909/D">CF909D</a></td><td>If we can finish each deletion of one character in $\mathcal{O}(1)$ time, we will be able to solve the problem.</td></tr></tbody></table><p>05.18</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1056/D">CF1056D</a></td><td>Smaller subtrees mean easier constraints</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/1575/H">CF1575H</a></td><td>When it comes to DP problems, you need to carefully choose your status.</td></tr></tbody></table><p>05.20</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/917/A">CF917A</a></td><td>When given a string, find the conditions it should satisfy to be “pretty”.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/335/B">CF335B</a></td><td>If you find the longest palindrome subsequence, you call always get the answer. But if it is longer than $100$, you can output a string of length $100$.</td></tr></tbody></table><p>05.21</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/533/E">CF533E</a></td><td>There are a lot of things in common for $S$ and $T$, such as their prefixes and suffixes.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/420/C">CF420C</a></td><td>Find a way to calculate the $p’$ (number of conditions satisfied) for one pair quickly.</td></tr></tbody></table><p>05.22</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1132/C">CF1132C</a></td><td>How does the painted section change when you “delete” $2$ painters?</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/314/C">CF314C</a></td><td>The question is similar to finding the longest increasing subsequence. How can you change the code to solve this?</td></tr></tbody></table><p>05.23</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/900/C">CF900C</a></td><td>What conditions should an element satisfy if it stays in the final result? What’s the contribution of deleting one element?</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/501/D">CF501D</a></td><td>You need to do $2$ things: find the order of one permutation; find the $k$-th permutation.</td></tr></tbody></table><p>05.24</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1095/D">CF1095D</a></td><td>If you decide one edge, the whole circle should be fully determined.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/301/B">CF301B</a></td><td>Just find the shortest path. Note that $a_i\leq 10^3\leq d$ .</td></tr></tbody></table><p>05.25</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/962/D">CF962D</a></td><td>Just implement it. Find a quick way to decide the deleted element.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/894/E">CF894E</a></td><td>In a strongly-connected component, you can go wherever you want.</td></tr></tbody></table><p>05.27</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/1954/D">CF1954D</a></td><td>If we know the number of balls of each color, what should be the minimum number of groups? How is it determined?</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/835/D">CF835D</a></td><td>Classic DP because one $k$-palindrome consists of two $k-1$-palindromes. You can use the result of the smaller substrings to decide the answer of the larger strings.</td></tr></tbody></table><p>05.28</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/869/C">CF869C</a></td><td>Find the necessary conditions first and then prove it is sufficient.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1168/B">CF1168B</a></td><td>The condition is hard to satisfy as there are $\mathcal{O}(k^2)$ triples. It means something.</td></tr></tbody></table><p>05.29</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1148/C">CF1148C</a></td><td>Find a way to swap $2$ elements.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/609/D">CF609D</a></td><td>You can wait until “the last moment” to decide when to exchange your burles and how you should buy items.</td></tr></tbody></table><p>05.30</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1217/C">CF1217C</a></td><td>Note that the value of $f(l,r)$ shouldn’t be too large.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1083/B">CF1083B</a></td><td>Consider prefixes of each length, how many times can they appear?</td></tr></tbody></table><p>05.31</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1671/D">CF1671D</a></td><td>Use the fact that you can insert any number between two consecutive numbers in the array without changing the score.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/960/D">CF960D</a></td><td>Note that the total depth isn’t large. And each number in the same layer is always changed together.</td></tr></tbody></table><h3 id="06月"><a href="#06月" class="headerlink" title="06月"></a>06月</h3><p>06.01</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1498/C">CF1498C</a></td><td>Which particles can be considered together? Use the conditions as the DP status.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/802/K">CF802K</a></td><td>When considering a subtree, there are two possible situations: you return to the root to get to the other subtrees; you never return.</td></tr></tbody></table><p>06.03</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/802/B">CF802B</a></td><td>When you have to “delete” one book in the library, which one should you choose? It should be not needed soon.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/862/C">CF862C</a></td><td>Note that the freedom of choosing the numbers is quite large. You can fix many integers as the numbers in the result first.</td></tr></tbody></table><p>06.04</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/1949/I">CF1949I</a></td><td>Consider two neighboring circles. If the radii of one circle change, how should the other change?</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1133/F2">CF1133F2</a></td><td>Find the minimum and the maximum degree of node $1$.</td></tr></tbody></table><p>06.05</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1579/E2">CF1579E2</a></td><td>Each element can be considered separately.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1209/G1">CF1209G1</a></td><td>This problem is actually about segments.</td></tr></tbody></table><p>06.06</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1561/D1">CF1561D1</a></td><td>Consider two kinds of shifts separately. The second one has only a few possible destinations in one shift.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1619/G">CF1619G</a></td><td>If one bomb can trigger another, it is also possible vice versa. So it’s all about a connected component.</td></tr></tbody></table><p>06.07</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1461/D">CF1461D</a></td><td>Find the separation point quickly. And it can be proven that there are not many possible subarray-sums.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/551/D">CF551D</a></td><td>Consider each digit separately.</td></tr></tbody></table><p>06.08</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1056/B">CF1056B</a></td><td>$m$ isn’t large, so the conditons of $(i, j)$ modulo $m$ isn’t large.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/1575/K">CF1575K</a></td><td>Fill in the blanks without constraint first. What about the others?</td></tr></tbody></table><p>06.10</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/1286/B">CF1286B</a></td><td>When you have the result of the subtrees, you can always find a suitable value for the root.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/524/C">CF524C</a></td><td>It’s a typical two-sum problem.</td></tr></tbody></table><p>06.11</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/725/D">CF725D</a></td><td>We should send away those who are stronger than us with the minimum cost.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/893/D">CF893D</a></td><td>You can keep your options open when processing the events. That is to say, you can save all the choices you have and delete some of them based on future events.</td></tr></tbody></table><p>06.12</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1153/C">CF1153C</a></td><td>Find the “best” way to construct a correct parenthesis.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/666/B">CF666B</a></td><td>After pre-processing the distance between vertices, you should find a way to enumerate $a\to b\to c\to d$.</td></tr></tbody></table><p>06.13</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1292/B">CF1292B</a></td><td>We only have a few points that are for us to consider. Suppose we arrive at $P_i$ first.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/958/C2">CF958C2</a></td><td>Consider a DP, but you don’t have to know where the last segment ends.</td></tr></tbody></table><p>06.14</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1615/C">CF1615C</a></td><td>Observe what the array can be after $1$ or $2$ operations.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/992/D">CF992D</a></td><td>You can’t multiply by a number other than $1$ many times.</td></tr></tbody></table><p>06.15</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1282/B2">CF1282B2</a></td><td>Suppose you need to buy $m$ goods. First, decide which goods to buy; second, find the minimum cost to buy them.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/811/D">CF811D</a></td><td>Find the perfect place to test.</td></tr></tbody></table><p>06.17</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/1249/D2">CF1249D2</a></td><td>Find the leftmost point which doesn’s satisfy the condition. Which segments should you delete?</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/535/D">CF535D</a></td><td>First, decide if the conditions contradict. Then, fill up the residual blanks.</td></tr></tbody></table><p>06.18</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/33/B">CF33B</a></td><td>Consider each position separately.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/819/B">CF819B</a></td><td>Consider each element and the contribution it makes to the result separately.</td></tr></tbody></table><p>06.19</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1051/D">CF1051D</a></td><td>DP is all about designing status and find the transitions.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/317/B">CF317B</a></td><td>The key point is that there are not too many ants. So if they are scattered on the plane, they should not go to far from the $(0, 0)$ .</td></tr></tbody></table><p>06.20</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/678/D">CF678D</a></td><td>You can derive the math function of the final result, but you can also use the matrix transition to represent the whole process.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/131/F">CF131F</a></td><td>First, use a note to record where are the stars. Then, if the upper bound and lower bound of the rectangle is chosen, the problem is a classic two-pointer one.</td></tr></tbody></table><p>06.21</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1151/D">CF1151D</a></td><td>The only variable for each element is actually $j$.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/242/D">CF242D</a></td><td>During the operations, there can only be one period when the condition of one counter is not met.</td></tr></tbody></table><p>06.22</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1033/C">CF1033C</a></td><td>Classic DP for games.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/1468/A">CF1468A</a></td><td>You only need to consider those “important” positions.</td></tr></tbody></table><p>06.24</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/336/C">CF336C</a></td><td>Consider each possible $v$ from large to small.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/535/C">CF535C</a></td><td>If you have multiple conditions to satisfy and the result is “monotone” when checking, you should consider binary search.</td></tr></tbody></table><p>06.25</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/863/C">CF863C</a></td><td>What if the $2$ robots choose the same actions as the did once before?</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1032/D">CF1032D</a></td><td>If you want to get to the line, you should go straight to it.</td></tr></tbody></table><p>06.26</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/833/A">CF833A</a></td><td>Consider each prime factor separately.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1009/E">CF1009E</a></td><td>Consider the contribution of each $a_i$ .</td></tr></tbody></table><p>06.27</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1085/D">CF1085D</a></td><td>Push the weights to other edges.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/366/D">CF366D</a></td><td>Note that the data range isn’t that wide. You can fix the lower bound to find the upper bound.</td></tr></tbody></table><p>06.28</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1321/C">CF1321C</a></td><td>Some characters should be removed earlier.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/74/C">CF74C</a></td><td>Remember the time when you learned about the mirror.</td></tr></tbody></table><p>06.29</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1196/D2">CF1196D2</a></td><td>There are only $3$ different patterns.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/804/C">CF804C</a></td><td>Think of one solution first, and then prove it.</td></tr></tbody></table><h3 id="07月"><a href="#07月" class="headerlink" title="07月"></a>07月</h3><p>07.01</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/1833/G">CF1833G</a></td><td>Consider the points from the leaves to the root.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/476/D">CF476D</a></td><td>You can divide each number by $k$ first. Then, note that you can’t have $2$ even numbers in a set.</td></tr></tbody></table><p>07.02</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/1442/B">CF1442B</a></td><td>It is about choosing the numbers to delete.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/999/D">CF999D</a></td><td>$\bmod m$ first, then the problem is transition from $i$ to $(i+1)\bmod m$ .</td></tr></tbody></table><p>07.03</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/739/A">CF739A</a></td><td>Find the answer first, and then construct the corresponding array.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/522/D">CF522D</a></td><td>You can process the queries offline. If the left bound is fixed, how can you solve it?</td></tr></tbody></table><p>07.04</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1672/D">CF1672D</a></td><td>The operation is only about moving one element.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/899/E">CF899E</a></td><td>Find the data structure you need to implement the whole process.</td></tr></tbody></table><p>07.05</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/570/C">CF570C</a></td><td>If we only have one segment consisting of <code>&#39;.&#39;</code>, what will the answer be?</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/103/D">CF103D</a></td><td>We don’t have data structures for strange sum like this. But if the $k$ is large, the number of numbers to add are not large.</td></tr></tbody></table><p>07.06</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/231/C">CF231C</a></td><td>If you want to make all elements in a subsequence equal, how many operations at least should you apply?</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/1023/E">CF1023E</a></td><td>$(n-1)+(n-1)&#x3D;2(n-1)$, so the answer should consist of $2$ parts.</td></tr></tbody></table><p>07.08</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/1195/D2">CF1195D2</a></td><td>If the positions of the digits of the number are fixed, the contribution of this number is determined. And the positions are only determined by the number of digits of $x,y$ .</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1585/D">CF1585D</a></td><td>The operation is just swapping twice. It is something.</td></tr></tbody></table><p>07.09</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/1138/B">CF1138B</a></td><td>Transform the equality to fix one side of it.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/111/B">CF111B</a></td><td>Consider each factor of $x_i$, and you only need to know if it occurs in $x_{i-y_i},\dots,x_{i-1}$ .</td></tr></tbody></table><p>07.10</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/489/D">CF489D</a></td><td>Counting a pattern in a graph: find the special part.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1060/E">CF1060E</a></td><td>How will the distance between $u$ and $v$ change?</td></tr></tbody></table><p>07.11</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1131/F">CF1131F</a></td><td>It is actually about merging the two consecutive parts.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/611/D">CF611D</a></td><td>Classic DP. When you decide which number to choose next, what information should you know?</td></tr></tbody></table><p>07.12</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/992/B">CF922B</a></td><td>Divide the numbers by the $gcd$ first. Then the numbers are co-prime.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/754/D">CF754D</a></td><td>Consider how can you calculate the length of the intersection, which is determined by two variable. If you fix one of them, how can you maximize &#x2F; minimize the other?</td></tr></tbody></table><p>07.13</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1059/C">CF1059C</a></td><td>Get the first non- $1$ element as soon as possible.</td></tr><tr><td>2300</td><td><a href="https://codeforces.com/problemset/problem/432/E">CF432E</a></td><td>Find the first element of non-filled position and fill it up.</td></tr></tbody></table><p>07.15</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/671/A">CF671A</a></td><td>Once a person get to the bin, his “total cost” to get a bottle is always twice the distance between the bottle and the bin.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/597/C">CF597C</a></td><td>Recall what you would do when calculating the number of increasing subsequences.</td></tr></tbody></table><p>07.16</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/442/B">CF442B</a></td><td>Calculate the marginal effect of adding one person.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1157/D">CF1157D</a></td><td>Find the minimum sum of the whole array. Then adjust it to the target.</td></tr></tbody></table><p>07.17</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1594/D">CF1594D</a></td><td>If one call another an “imposter”, they are just of different types; otherwise, they are of the same type.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/243/B">CF243B</a></td><td>Clearly, $u, v$ are the most important part of the pattern to find. How can you check the “heads” and “tails”?</td></tr></tbody></table><p>07.18</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/622/C">CF622C</a></td><td>As you can find any position $p_i$ that satisfy the conditions, you can choose the leftmost &#x2F; rightmost one. The only thing you need to do is to “jump over” a consecutive subarray.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/156/C">CF156C</a></td><td>1. What doesn’t change when the operation is applied? Is it a sufficient condition? 2. What are the important variable of the final string?</td></tr></tbody></table><p>07.19</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1243/B2">CF1243B2</a></td><td>You only need to use $2$ operations to get one position right.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/190/E">CF190E</a></td><td>The BFS and DFS here should be those unvisited minus those places which you can’t go in the next step.</td></tr></tbody></table><p>07.20</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/954/D">CF954D</a></td><td>How does the length of shortest path change when you add an edge?</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/425/B">CF425B</a></td><td>First of all, figure out the configuration of the whole grid. Then consider why $k$ is so small.</td></tr></tbody></table><p>07.22</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/1119/D">CF1119D</a></td><td>Consider each gap separately.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1172/B">CF1172B</a></td><td>Fix one point first, and then you only need to consider the answer of the subtrees and the order of them.</td></tr></tbody></table><p>07.23</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/351/A">CF351A</a></td><td>You only need to consider the numbers after the <code>&#39;.&#39;</code>. How many $1000$ -s will they become?</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/792/D">CF792D</a></td><td>Find the relation between the numbers of a node, its parent and its children.</td></tr></tbody></table><p>07.24</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/798/C">CF798C</a></td><td>Actually, the $gcd$ can’t change much. Why?</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/367/C">CF367C</a></td><td>If we choose $k$ numbers, what is the minimum length of the array?</td></tr></tbody></table><p>07.25</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1023/D">CF1023D</a></td><td>What conditions should the final array satisfy?</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/886/D">CF886D</a></td><td>The numbers of appearances of all the substrings of the given strings should be the same.</td></tr></tbody></table><p>07.26</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1660/E">CF1660E</a></td><td>We want to make the maximum number of $1$ on the diagonal. The operations is actually “moving” the grid up or down, left or right. “Moving” is relative.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/231/E">CF231E</a></td><td>Where can you find a different way between the nodes? Count that in a tree.</td></tr></tbody></table><p>07.27</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/814/C">CF814C</a></td><td>You should notice that there can’t be too many different queries.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/713/B">CF713B</a></td><td>It is always easier to solve the problem for $1$ rectangle. Find one large rectangle that only contains one without overlapping with the other.</td></tr></tbody></table><p>07.29</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/513/B2">CF513B2</a></td><td>Think of the smallest element. How many times is it counted?</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1105/D">CF1105D</a></td><td>Whick points can generate new points in the next round? How can you consider $speed[i]$ ?</td></tr></tbody></table><p>07.30</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/626/D">CF626D</a></td><td>Consider the first $2$ balls as a whole.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1163/C2">CF1163C2</a></td><td>There are only $3$ different position conditions between $2$ lines.</td></tr></tbody></table><p>07.31</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1041/D">CF1041D</a></td><td>The “area” is “good” for you, so at least make full use of the leftmost chosen one.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/916/B">CF916B</a></td><td>First of all, find the shortest sequence. Prove it is the lexicographically largest one.</td></tr></tbody></table><h3 id="08月"><a href="#08月" class="headerlink" title="08月"></a>08月</h3><p>08.01</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1329/B">CF1329B</a></td><td>If you have $a_1(b_1)$ , what conditions should $b_2$ satisfy?</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/196/B">CF196B</a></td><td>If one can go infinitely far in one grid, at least one of $(x\bmod n,y\bmod m)$ should be visited infinite times.</td></tr></tbody></table><p>08.02</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/888/D">CF888D</a></td><td>Consider different $k$ -s.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/269/C">CF269C</a></td><td>If the in-flows of one point are already determined, the out-flows are also determined.</td></tr></tbody></table><p>08.03</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/835/C">CF835C</a></td><td>The stars shine cyclically.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/538/F">CF538F</a></td><td>For each $k$, how many conditions should you check?</td></tr></tbody></table><p>08.05</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/835/C">CF835C</a></td><td>The stars shine cyclically.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/538/F">CF538F</a></td><td>For each $k$, how many conditions should you check?</td></tr></tbody></table><p>08.06</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/1177/B">CF1177B</a></td><td>Consider numbers which have the same number of digits separately.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/832/D">CF832D</a></td><td>Consider the patterns of the paths.</td></tr></tbody></table><p>08.07</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/578/B">CF578B</a></td><td>The largest number determines the length of the binary expression of the answer.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/689/E">CF689E</a></td><td>Consider the contribution of each point.</td></tr></tbody></table><p>08.08</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/729/D">CF729D</a></td><td>For each segment of $0$ , find out the minimum cells to detect.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/557/D">CF557D</a></td><td>What is the maximum answer? From $0$ to the maximum answer, what conditions should the graph satisfy?</td></tr></tbody></table><p>08.09</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/476/C">CF476C</a></td><td>Write the division equation with a remainder in the form of $x&#x3D;d\times y+r$ .</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/575/F">CF575F</a></td><td>Only a few points matter. Use them.</td></tr></tbody></table><p>08.10</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/949/A">CF949A</a></td><td>Try to make the number of arrays as small as possible. Then we should not create an array unless it is necessary.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/731/E">CF731E</a></td><td>It’s about choosing the prefix sum in turn while the array keeps changing. Or, the array is not actually changing?</td></tr></tbody></table><p>08.12</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/1090/D">CF1090D</a></td><td>Find $2$ elements that can be swapped.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/724/D">CF724D</a></td><td>You should always use the lexicographically smaller characters.</td></tr></tbody></table><p>08.13</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/822/D">CF822D</a></td><td>$l, r$ isn’t too large. And the sum of the numbers of factors of integers from $l$ to $r$ is not that large.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/722/D">CF722D</a></td><td>How can you make the largest number smaller?</td></tr></tbody></table><p>08.14</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/578/A">CF578A</a></td><td>There are only $2$ types of segments.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1092/E">CF1092E</a></td><td>Hope you’re familiar with the problem where there are $2$ trees in a forest.</td></tr></tbody></table><p>08.15</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/464/A">CF464A</a></td><td>Find the first position to change, which should be as closer to the right end as possible.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/862/D">CF862D</a></td><td>If you use binary search to find one $0&#x2F;1$, how many queries do you need?</td></tr></tbody></table><p>08.16</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1252/C">CF1252C</a></td><td>What makes a move from $(x,y)$ to $(x’,y’)$ a legal one?</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/441/D">CF441D</a></td><td>How does the answer change when you swap $2$ elements?</td></tr></tbody></table><p>08.17</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/993/A">CF993A</a></td><td>Find the representative points.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/1039/C">CF1039C</a></td><td>For each $x$, find the number of corresponding methods.</td></tr></tbody></table><p>08.19</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/827/B">CF827B</a></td><td>Root the tree at the middle of the diameter.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/622/D">CF622D</a></td><td>Find the minimum first. Note that $d_n$ is not actually used in the formula.</td></tr></tbody></table><p>08.20</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/1076/D">CF1076D</a></td><td>Some edges are more important when considering the shortest path.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1600/E">CF1600E</a></td><td>The second player’s strategy: Find a corresponding move for each move of the first player.</td></tr></tbody></table><p>08.21</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1644/D">CF1644D</a></td><td>Consider which round of coloring lasts till the end.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/681/D">CF681D</a></td><td>First of all, decide which men should appear in your answer. Then, decide their order. At last, check the order.</td></tr></tbody></table><p>08.22</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/689/C">CF689C</a></td><td>Use a formula to describe the pattern of the array.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/360/B">CF360B</a></td><td>Consider DP. If the value is included in the DP, then the number of status can be too large. How can you avoid it?</td></tr></tbody></table><p>08.23</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/878/A">CF878A</a></td><td>Consider each bit separately.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/1184/A2">CF1184A2</a></td><td>For each $k$, what can you infer from the conditions?</td></tr></tbody></table><p>08.24</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/849/B">CF849B</a></td><td>If $3$ points is divided in $2$ groups, …</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/431/E">CF431E</a></td><td>You should fill up the containers with the minimum number of mercury first. How much volume can you put in them without exceeding the other containers? How can you calculate it efficiently?</td></tr></tbody></table><p>08.26</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/432/C">CF432C</a></td><td>You just need to process $swap(i,j)$ efficiently.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1147/B">CF1147B</a></td><td>If you rotate $x$ units and the image is the same, can your $x$ be smaller?</td></tr></tbody></table><p>08.27</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/1290/B">CF1290B</a></td><td>What is the actual conditions to check?</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1237/C2">CF1237C2</a></td><td>Consider the problem in a lower dimension.</td></tr></tbody></table><p>08.28</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1278/C">CF1278C</a></td><td>Consider the remaining jars.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1019/B">CF1019B</a></td><td>$(a_{i}-a_{i+n&#x2F;2})+(a_{i+n&#x2F;2}-a_i)&#x3D;0$</td></tr></tbody></table><p>08.29</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/850/A">CF850A</a></td><td>Consider the problem in a lower dimension. If we fix one point $a$ , we can’t have too many points other than $a$ .</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/248/C">CF248C</a></td><td>The wall is like a mirror, so kick the ball towards the target “in the mirror”. To get the ball in, it’s always good to kick it towards farther side of the gate.</td></tr></tbody></table><p>08.30</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/768/B">CF768B</a></td><td>As $r-l$ is not large, we can find out the answer of each position.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/1176/F">CF1176F</a></td><td>Consider the basic DP. Do we really need to consider all the possible status in the previous round?</td></tr></tbody></table><p>08.31</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/847/B">CF847B</a></td><td>Instead of constructing each array separately, you can consider the position of each element.</td></tr><tr><td>2400</td><td><a href="https://codeforces.com/problemset/problem/1673/F">CF1673F</a></td><td>A cycle means $0$ .</td></tr></tbody></table><h3 id="09月"><a href="#09月" class="headerlink" title="09月"></a>09月</h3><p>09.02</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/117/B">CF117B</a></td><td>$s_1$ has no reason to be large.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1055/C">CF1055C</a></td><td>As the length of the intervals are fixed, we just need to let their ends to be as close as possible.</td></tr></tbody></table><p>09.03</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/873/D">CF873D</a></td><td>Add one occurence of “merge-sort” each time.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1031/D">CF1031D</a></td><td>We should at least maximize the prefix $a$ -s at first. Then we actually has nothing to change.</td></tr></tbody></table><p>09.04</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/449/A">CF449A</a></td><td>Consider one edge first. What can be the possible separations?</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/494/B">CF494B</a></td><td>DP. If the last interval ends at $r$ , what should its right end satisfy?</td></tr></tbody></table><p>09.05</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/769/D">CF769D</a></td><td>There aren’t many numbers that can be expressed by $nums[i] \mathrm{xor} nums[j]$ and have exactly $k$ bits.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/353/D">CF353D</a></td><td>Only consider boys or girls, not them both.</td></tr></tbody></table><p>09.06</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/593/B">CF593B</a></td><td>Use a single formula to check if the intersection lays between $x_1$ and $x_2$ .</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/838/B">CF838B</a></td><td>How can you go from $u$ to $v$ ? What is the distance dependent on?</td></tr></tbody></table><p>09.07</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/858/D">CF858D</a></td><td>You only need to decide whether all occurences of one substring come from the same string.</td></tr><tr><td>2300</td><td><a href="https://codeforces.com/problemset/problem/870/E">CF870E</a></td><td>Each point means a connection between a vertical line and a horizontal line.</td></tr></tbody></table><p>09.09</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/551/B">CF551B</a></td><td>Enumerate the number of $b$ -s.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1017/D">CF1017D</a></td><td>Pre-process to calculate the final answer. We only have $2^n$ kinds of “differences” and $101$ types of values to consider.</td></tr></tbody></table><p>09.10</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/913/D">CF913D</a></td><td>For a set of problems, we should at least delete those useless ones. For the others, we can always use greedy approach.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/744/B">CF744B</a></td><td>The problem is all about finding minimum value without a point. It’s actually finding the union of a few sets.</td></tr></tbody></table><p>09.11</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/644/B">CF644B</a></td><td>Consider each query by time order. Construct a queue to check if the query is implemented.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/314/B">CF314B</a></td><td>First of all, all characters should be found greedily. As the lengths of strings are not too long, there are not many status.</td></tr></tbody></table><p>09.12</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1267/E">CF1267E</a></td><td>We only need to have one candidate to get the votes that are more than the $n$ -th one, so consider each candidate separately.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1061/D">CF1061D</a></td><td>After using a TV, keeping it is like having a coupon.</td></tr></tbody></table><p>09.13</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/735/C">CF735C</a></td><td>Think of the problem reversely. That is, find the largest number of nodes in a balanced tree with a height of $h$ .</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/336/D">CF336D</a></td><td>If we consider a AND operator, $0$ means a reset. Here, a similar thing happens.</td></tr></tbody></table><p>09.14</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/682/C">CF682C</a></td><td>If a $u$ doesn’t satisfy the condition, its subtree should all be removed.</td></tr><tr><td>2300</td><td><a href="https://codeforces.com/problemset/problem/1065/E">CF1065E</a></td><td>Check the string and the reversed string. What happens in a operation?</td></tr></tbody></table><p>09.16</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/641/C">CF641C</a></td><td>Odd-s and even-s move together.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1063/C">CF1063C</a></td><td>It is hard to think about this problem in a 2D plane. Try considering it on a line.</td></tr></tbody></table><p>09.17</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/433/C">CF433C</a></td><td>How can you calculate the difference between the status with &#x2F; without changing $x$ to $y$ .</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/729/E">CF729E</a></td><td>Find the sufficient and necessary condition first.</td></tr></tbody></table><p>09.18</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1279/D">CF1279D</a></td><td>Process each step carefully.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/340/E">CF340E</a></td><td>Inclusion-exclusion method.</td></tr></tbody></table><p>09.19</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/281/B">CF281B</a></td><td>The demoninator isn’t large, so we can enumerate it.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/309/A">CF309A</a></td><td>Additivity of expectation. How can a bumping occur?</td></tr></tbody></table><p>09.20</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/615/B">CF615B</a></td><td>Calculate the longest tail for each node.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/852/C">CF852C</a></td><td>How can you calculate the total area? If the angle formed by two sides are fixed, How is the area determined?</td></tr></tbody></table><p>09.21</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1082/B">CF1082B</a></td><td>Almost the same as changing one $S$ into $G$ .</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/413/E">CF413E</a></td><td>Classic segment tree problem. It’s just what variable should you choose.</td></tr></tbody></table><p>09.23</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/1073/C">CF1073C</a></td><td>When $maxID-minID+1$ is fixed, what segment can you change? Where can you get?</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1648/C">CF1648C</a></td><td>Find the first position where the strings differ.</td></tr></tbody></table><p>09.24</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/436/C">CF436E</a></td><td>It’s actually constructing a tree.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/731/F">CF731F</a></td><td>Derive the final formula to calculate first. The $a_i$ can’t be large. How can that help?</td></tr></tbody></table><p>09.25</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1210/B">CF1210B</a></td><td>If a student can find someone who he is not better than, what condition should that “someone” satisfy?</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/761/E">CF761E</a></td><td>To avoid intersection, design the length of each edge carefully.</td></tr></tbody></table><p>09.26</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/895/B">CF895B</a></td><td>How can you calculate the number of $y$ in the interval $[l,r]$ that is divisible by $x$ .</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/975/D">CF975D</a></td><td>List out the equation that two points should satisfy such that they meet at some point.</td></tr></tbody></table><p>09.27</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/416/C">CF416C</a></td><td>Consider each table from small to large.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/900/E">CF900E</a></td><td>How can you check if there is a “match”?</td></tr></tbody></table><p>09.28</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/429/B">CF429B</a></td><td>Consider the path around the intersection position.</td></tr><tr><td>2400</td><td><a href="https://codeforces.com/problemset/problem/1679/E">CF1679E</a></td><td>For each substring, there is a multiple choice of character set that can make it palindrome. How can the set be calculated? For each set, how many different palindromes can be produced?</td></tr></tbody></table><p>09.30</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/946/D">CF946D</a></td><td>For each day, if you skip $k$ lessons, there is a maximum amount of time you can save.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/935/D">CF935D</a></td><td>Again, if a string is smaller than the other, we should let their prefix be the same and the next letter be smaller.</td></tr></tbody></table><h3 id="10月"><a href="#10月" class="headerlink" title="10月"></a>10月</h3><p>10.01</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/363/D">CF363D</a></td><td>If we fix the number of rented bikes, it is easy to choose which bikes to rent.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1677/C">CF1677C</a></td><td>Transform $|num_{a_i}-num_{b_i}|$ into $|num_i-num_{p_i}|$. What is that supposed to mean?</td></tr></tbody></table><p>10.02</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/990/D">CF990D</a></td><td>If a graph is not connected, its complement is connected.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/803/E">CF803E</a></td><td>For each round, there are multiple status you can get to.</td></tr></tbody></table><p>10.03</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1472/E">CF1472E</a></td><td>Reduce the conditions to one.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1131/D">CF1131D</a></td><td>Inequalities are easy to be dealt with, so process the equalities first.</td></tr></tbody></table><p>10.04</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/922/C">CF922C</a></td><td>Actually, you can find out each $n\bmod i$.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/748/E">CF748E</a></td><td>$10^7$ should be used. Find out the maximum number of students who can get at least $k$ slices for each $k$.</td></tr></tbody></table><p>10.05</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/731/C">CF731C</a></td><td>Each day provide a condition that the colors of the chosen pairs are the same.</td></tr><tr><td>2300</td><td><a href="https://codeforces.com/problemset/problem/558/D">CF558D</a></td><td>Each condition represents $1&#x2F;2$ segments in the leaves.</td></tr></tbody></table><p>10.07</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/325/B">CF325B</a></td><td>Calculate the number of games when there is $n$ players.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/865/B">CF865B</a></td><td>Use greedy approach. If you order too many pizzas, adjust your solution.</td></tr></tbody></table><p>10.08</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/1227/D2">CF1227D2</a></td><td>For each $k$ , which elements should you choose? For different $k$ -s, the change is not big.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1482/D">CF1482D</a></td><td>You can delete the array step by step, as there are at most $n$ elements to delete.</td></tr></tbody></table><p>10.09</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1280/A">CF1280A</a></td><td>We only need to consider the first $x$ letters and the current length of the whole string.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1320/C">CF1320C</a></td><td>For each weapon, there are only a few monsters you should consider. The choice of armor determines your profit.</td></tr></tbody></table><p>10.10</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/756/A">CF756A</a></td><td>Consider the permutation as a graph, and eventually it should consist of $1$ cycle.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/999/F">CF999F</a></td><td>Each person only need to consider one type of cards. So group the players.</td></tr></tbody></table><p>10.11</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/847/H">CF847H</a></td><td>You only need to decide where the “middle point” is.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/799/D">CF799D</a></td><td>You don’t need many kinds of operations.</td></tr></tbody></table><p>10.12</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1082/C">CF1082C</a></td><td>Iterate over the number of students participating in each group.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/809/B">CF809B</a></td><td>Find one of the answers first.</td></tr></tbody></table><p>10.14</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/257/C">CF257C</a></td><td>We just need to calculate the angle for each point.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/417/D">CF417D</a></td><td>The final cost is composed of $2$ parts: monitors and friends. You can fix the first one to find the minimum of the second part.</td></tr></tbody></table><p>10.15</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/743/D">CF743D</a></td><td>All about choosing $2$ non-intersecting subtrees. So derive it from the leaves.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/757/C">CF757C</a></td><td>Consider each $f(i)&#x3D;j$ . What’s the condition you should consider?</td></tr></tbody></table><p>10.16</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1118/E">CF1118E</a></td><td>Find a simple rule to satisfy all of the conditions.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/641/E">CF641E</a></td><td>You can consider each element and process its queries separately.</td></tr></tbody></table><p>10.17</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1009/C">CF1009C</a></td><td>Each operation can be considered separately.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/178/C3">CF178C3</a></td><td>It is all about finding the first empty place from some place $x$ .</td></tr></tbody></table><p>10.18</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/424/C">CF424C</a></td><td>You can swap the elements, combine the elements as you want and calculate the xor-value of the whole array.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/268/E">CF268E</a></td><td>Consider the order of $2$ consecutive songs.</td></tr></tbody></table><p>10.19</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/405/C">CF405C</a></td><td>List all of the elements that are calculated.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/255/E">CF255E</a></td><td>Once a move is made, the number became small enough.</td></tr></tbody></table><p>10.21</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/487/A">CF487A</a></td><td>Attack and defence ability doesn’t need to change too much.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/811/C">CF811C</a></td><td>How can you check an interval is valid?</td></tr></tbody></table><p>10.22</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/238/B">CF238B</a></td><td>Find a basic answer. Can you make it better?</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/550/D">CF550D</a></td><td>If we delete the bridge, what should we construct?</td></tr></tbody></table><p>10.23</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/818/D">CF818D</a></td><td>How can you check if $x$ satisfy the condition? What’s the time complexity? How can you reduce the sum of time complexity?</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/412/D">CF412D</a></td><td>Each pair should either have a special order or be separated.</td></tr></tbody></table><p>10.24</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/305/B">CF305B</a></td><td>Each fraction has a unique corresponding continued fraction.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/195/E">CF195E</a></td><td>When you connect two points, you are merging them and updating the “depth” data.</td></tr></tbody></table><p>10.25</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/407/B">CF407B</a></td><td>When you have to go to $p_i$ , how many steps does it take to get to $i$ again.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/1005/F">CF1005F</a></td><td>Calculate the shortest path first. For each vertice, you just need to find its previous vertice to determine the edge.</td></tr></tbody></table><p>10.26</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/712/C">CF712C</a></td><td>When making the triangle smaller, it’s easy to generate an illegal triangle. So you should do it reversely.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/645/E">CF645E</a></td><td>Find out the DP function first. How can you maximize it?</td></tr></tbody></table><p>10.28</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/1252/H">CF1252H</a></td><td>When considering two dimensions, it’s always easier to fix one first.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1043/E">CF1043E</a></td><td>Do the calculation without restriction first. When should we choose the $x_i+y_j$ instead of $x_j+y_i$ ? Is there an simpler rule?</td></tr></tbody></table><p>10.29</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/358/D">CF358D</a></td><td>For each position, we only care about two things: Does the one on the left of it comes earlier? Does the one on the right of it comes earlier?</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/613/A">CF613A</a></td><td>You just need to find the minimum and the maximum distance.</td></tr></tbody></table><p>10.30</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/621/C">CF621C</a></td><td>The additivity of expectation. Then you can just calculate the probability.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/515/D">CF515D</a></td><td>Find out those positions where the direction of the tile is already determined</td></tr></tbody></table><p>10.31</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/590/A">CF590A</a></td><td>When should an element change?</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/659/F">CF659F</a></td><td>Iterate over the final non-zero number.</td></tr></tbody></table><h3 id="11月"><a href="#11月" class="headerlink" title="11月"></a>11月</h3><p>11.01</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/992/C">CF992C</a></td><td>List out the first few steps.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/295/C">CF295C</a></td><td>For each “round”, what status should you care about?</td></tr></tbody></table><p>11.02</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1062/C">CF1062C</a></td><td>For each segment, find a optimal way to operate. Which variables determine the answer?</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/868/D">CF868D</a></td><td>When considering substrings of length $k$, the concatenation of strings does not generate a lot of different ones.</td></tr></tbody></table><p>11.04</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1062/C">CF1062C</a></td><td>For each segment, find a optimal way to operate. Which variables determine the answer?</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/868/D">CF868D</a></td><td>When considering substrings of length $k$, the concatenation of strings does not generate a lot of different ones.</td></tr></tbody></table><p>11.05</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/1067/B">CF1067B</a></td><td>What is the most important point in this graph? Start from it.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/982/D">CF982D</a></td><td>Actually, you need to calculate the number of connected components. In what order should you merge them?</td></tr></tbody></table><p>11.06</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/575/D">CF575D</a></td><td>Try to block the thief.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1280/C">CF1280C</a></td><td>Consider each edge. What’s its maximum &#x2F; minimum times to be calculated? Is it achievable?</td></tr></tbody></table><p>11.07</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1254/A">CF1254A</a></td><td>Find the number of <code>&#39;R&#39;</code>-s in each connected component first. How can you construct a connected component that has exactly $x$ <code>&#39;R&#39;</code>-s?</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/814/D">CF814D</a></td><td>How can you check the relation between circles? Then, make the most use of the second group.</td></tr></tbody></table><p>11.08</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1027/C">CF1027C</a></td><td>When is $P^2&#x2F;S$ smaller?</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/587/B">CF587B</a></td><td>It is about choosing subsequence from consecutive segments.</td></tr></tbody></table><p>11.09</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/979/C">CF979C</a></td><td>You just need to rule out the “bad” routes.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/1650/F">CF1650F</a></td><td>Which task should you finish first? And what options should you choose?</td></tr></tbody></table><p>11.11</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/1280/B">CF1280B</a></td><td>A classic problem to consider different cases. Find the maximum possible answer first. Which kinds of cases are easy to check?</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/846/D">CF846D</a></td><td>How can you confirm if a sub-matrix is already dead?</td></tr></tbody></table><p>11.12</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/847/E">CF847E</a></td><td>Another minimization problem. If the time is fixed, how can you check if all of the asterisks can be eaten? Note that you should let the left Packmen eat the left asterisks.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/682/D">CF682D</a></td><td>For each string, the chosen substrings separate it into a few parts.</td></tr></tbody></table><p>11.13</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1204/C">CF1204C</a></td><td>How can you check if a vertex $x$ is on the path from $u$ to $v$ ?</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/963/B">CF963B</a></td><td>Think from the leaves.</td></tr></tbody></table><p>11.14</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1580/A">CF1580A</a></td><td>Fix three sides and find a way to minimize the answer.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/164/B">CF164B</a></td><td>Having considered the $i$ -th character of $a$ , you should directly know where the $i+1$ -th character of $a$ should be in $b$ .</td></tr></tbody></table><p>11.15</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/353/C">CF353C</a></td><td>If the chosen value is already smaller, all of the lower digits should be collected.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/163/C">CF163C</a></td><td>Each round of run is about choosing an interval in the conveyor.</td></tr></tbody></table><p>11.16</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/430/A">CF430A</a></td><td>“Differ by at most one”. Note that the points chosen by an interval are consecutive.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/932/D">CF932D</a></td><td>How can you find the first larger predecessor quickly? Jump through the useless predecessors. Then connect the vertice with its predecessor, and you just need to calculate most steps that could be taken.</td></tr></tbody></table><p>11.18</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/610/C">CF610C</a></td><td>Try smaller $K$ -s.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/717/D">CF717D</a></td><td>How can you decide the outcome of a Nim game? How does this status change?</td></tr></tbody></table><p>11.19</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/201/B">CF201B</a></td><td>Add the cost up first. The final function consists of $2$ parts.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/372/B">CF372B</a></td><td>First of all, find all sub-rectangles that are “good”. Then, find a way to pre-process for all $(a,b,c,d)$ combinations.</td></tr></tbody></table><p>11.20</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/507/C">CF507C</a></td><td>It’s similar to a DFS. So it covers a subtree first and then the other.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/137/E">CF137E</a></td><td>Transform the string into an array. Its prefix sum is almost consecutive.</td></tr></tbody></table><p>11.21</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1068/C">CF1068C</a></td><td>Construct a base graph first. When adding an edge, what should you do to adjust it?</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/533/B">CF533B</a></td><td>Classic tree DP. Don’t forget the conditions you should satisfy to add one employee.</td></tr></tbody></table><p>11.22</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/873/C">CF873C</a></td><td>Consider each column separately.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/215/E">CF215E</a></td><td>Iterate over the number of digits.</td></tr></tbody></table><p>11.23</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/337/C">CF337C</a></td><td>Greedily arrange the correct problems. You should make the number of doubles as small as possible and as early as possible.</td></tr><tr><td>2400</td><td><a href="https://codeforces.com/problemset/problem/441/E">CF441E</a></td><td>The suffix of the original number is not changed much.</td></tr></tbody></table><p>11.25</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/700/B">CF700B</a></td><td>Consider how many times an edge should be calculated.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/566/D">CF566D</a></td><td>The key is that you should not “merge” teams twice in operation $2$ and that you should find the next position to operate effectively.</td></tr></tbody></table><p>11.26</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/174/C">CF174C</a></td><td>Adding a value to a segment is all about changing two elements in a first-order differential sequence.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/223/C">CF223C</a></td><td>Consider the weight of each element.</td></tr></tbody></table><p>11.27</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/288/C">CF288C</a></td><td>Consider each bit separately.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1612/E">CF1612E</a></td><td>When $t$ is large, adding new elements is not profitable.</td></tr></tbody></table><p>11.28</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>*1700</td><td><a href="https://codeforces.com/problemset/problem/398/B">CF398B</a></td><td>You just care about how many rows and columns remain after operations.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/119/C">CF119C</a></td><td>Even $a_i,b_i$ is large, their difference is small, so you can always use DP.</td></tr></tbody></table><p>11.29</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/364/A">CF364A</a></td><td>Find a way to calculate the sum of the submatrix quickly.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/1387/A">CF1387A</a></td><td>Solve the problem for each connected component separately. If $x_i$ is changeable, what value should it choose?</td></tr></tbody></table><p>11.30</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/319/A">CF319A</a></td><td>After considering the largest bit, we can divide the array into two parts which are basically the same.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/369/D">CF369D</a></td><td>There is a pattern that the remaining fools should follow.</td></tr></tbody></table><h3 id="12月"><a href="#12月" class="headerlink" title="12月"></a>12月</h3><p>12.02</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>*1800</td><td><a href="https://codeforces.com/problemset/problem/396/B">CF396B</a></td><td>A lot of $v(i)u(i)$ are the same. Consider them together!</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/362/C">CF362C</a></td><td>How does the swap of two elements change the total number of inversions?</td></tr></tbody></table><p>12.03</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/883/H">CF883H</a></td><td>The number of possible splits can’t be large.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/229/C">CF229C</a></td><td>Consider the basic characteristics of a triangle.</td></tr></tbody></table><p>12.04</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/297/A">CF297A</a></td><td>$0$ can be added as many as you want, but $1$ can’t.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/126/C">CF126C</a></td><td>The further one pixel is from the diagonal, the smaller number of operations it can be flipped by.</td></tr></tbody></table><p>12.05</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/698/B">CF698B</a></td><td>Process each connected component first.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/228/C">CF228C</a></td><td>When detecting a $k$ -order fractal, you can use the result of the $k-1$ -order fractal.</td></tr></tbody></table><p>12.06</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/250/C">CF250C</a></td><td>Consider the difference removing a “segment” can make.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/209/B">CF209B</a></td><td>Iterate over which pixel remains. How can the numbers of the other two change?</td></tr></tbody></table><p>12.07</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1523/C">CF1523C</a></td><td>Find a way that can save enough room for future editions.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/639/C">CF639C</a></td><td>Consider the difference you should make.</td></tr></tbody></table><p>12.09</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/185/B">CF185B</a></td><td>Transform the target function into a convex one.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/356/B">CF356B</a></td><td>Which pairs of positions can meet?</td></tr></tbody></table><p>12.10</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/234/F">CF234F</a></td><td>It’s easy to find the DP traits in the problem. Just decide what status you should include.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/257/D">CF257D</a></td><td>Start from the right.</td></tr></tbody></table><p>12.11</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1219/C">CF1219C</a></td><td>It’s all about case work.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/671/B">CF671B</a></td><td>We only care about the richest and poorest people. The numbers of their coins only increase &#x2F; decrease with time.</td></tr></tbody></table><p>12.12</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1219/C">CF1219C</a></td><td>It’s all about case work.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/671/B">CF671B</a></td><td>We only care about the richest and poorest people. The numbers of their coins only increase &#x2F; decrease with time.</td></tr></tbody></table><p>12.13</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/86/A">CF86A</a></td><td>The function is not that complex as it seems.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/542/F">CF542F</a></td><td>A knapsack problem. What is the actual size of a task?</td></tr></tbody></table><p>12.14</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/848/A">CF848A</a></td><td>Find a way to calculate the cost.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/404/E">CF404E</a></td><td>There can’t be many obstacles. And once you discover the number of obstacles and the positions of them, you can greedily move them.</td></tr></tbody></table><p>12.16</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/95/B">CF95B</a></td><td>Enlarge a digit and the digits following can be whatever you want.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/331/B2">CF331B2</a></td><td>Switch the array into another one.</td></tr></tbody></table><p>12.17</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/95/B">CF95B</a></td><td>Enlarge a digit and the digits following can be whatever you want.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/331/B2">CF331B2</a></td><td>Switch the array into another one.</td></tr></tbody></table><p>12.18</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/479/D">CF479D</a></td><td>You don’t need to make a lot of marks. What are the different cases?</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/896/B">CF896B</a></td><td>Greedily thinking, you should put the small numbers from the left and large numbers from the right. Is it really correct?</td></tr></tbody></table><p>12.19</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1056/C">CF1056C</a></td><td>Make use of your advantage.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/82/D">CF82D</a></td><td>The pattern of the queue of customers is special.</td></tr></tbody></table><p>12.20</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/297/B">CF297B</a></td><td>Find the component of each fish.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/165/D">CF165D</a></td><td>All about checking if there is a white edge on the path and finding out the distance.</td></tr></tbody></table><p>12.21</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/980/B">CF980B</a></td><td>You don’t need to actually calculate the number of shortest paths.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/507/D">CF507D</a></td><td>The modulo condition starts from the suffix, so DP from the right.</td></tr></tbody></table><p>12.23</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/77/B">CF77B</a></td><td>Try drawing the area that satisfies the conditions.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/134/B">CF134B</a></td><td>If the final pair is fixed, the number of steps is fixed.</td></tr></tbody></table><p>12.24</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/142/B">CF142B</a></td><td>If you can make pairs between positions, it’s easy to decide &#x2F; prove the answer.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/228/E">CF228E</a></td><td>It is useless to apply operation on a single city more than twice.</td></tr></tbody></table><p>12.25</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/938/C">CF938C</a></td><td>Find a way to calculate the answer first. How can you reverse it?</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/755/D">CF755D</a></td><td>It’s about the number of intersections.</td></tr></tbody></table><p>12.26</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1042/C">CF1042C</a></td><td>There are only three types of numbers.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1610/D">CF1610D</a></td><td>Bezout Theorem.</td></tr></tbody></table><p>12.27</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1223/C">CF1223C</a></td><td>The more the better.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/276/E">CF276E</a></td><td>It’s a tree with a special configuration.</td></tr></tbody></table><p>12.28</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/323/A">CF323A</a></td><td>Learn from the example. For how to prove: connect each block with its neighboring block with the same color.</td></tr><tr><td>2300</td><td><a href="https://codeforces.com/problemset/problem/306/D">CF306D</a></td><td>When you decide the first few edges, the last ones are already settled. How can you make it different?</td></tr></tbody></table><p>12.30</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/51/C">CF51C</a></td><td>It’s just about separating the points into three segments.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/327/D">CF327D</a></td><td>Consider each connected component.</td></tr></tbody></table><p>12.31</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/1575/D">CF1575D</a></td><td>Iterate over $X$ .</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1260/D">CF1260D</a></td><td>It’s more possible to move to the end with less squads.</td></tr></tbody></table><h2 id="2025年"><a href="#2025年" class="headerlink" title="2025年"></a>2025年</h2><h3 id="01月"><a href="#01月" class="headerlink" title="01月"></a>01月</h3><p>01.01</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/769/C">CF769C</a></td><td>For the first few steps, you can use greedy approach, but you should guarantee that you can come back.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/2045/B">CF2045B</a></td><td>$D$ can step in only once.</td></tr></tbody></table><p>01.02</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/581/D">CF581D</a></td><td>There are only a few configurations.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/33/D">CF33D</a></td><td>Circles without intersections can be represented as a tree.</td></tr></tbody></table><p>01.03</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/725/C">CF725C</a></td><td>Only one character appears twice.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/65/C">CF65C</a></td><td>$v_s\leq v_p$ means something.</td></tr></tbody></table><p>01.04</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/704/A">CF704A</a></td><td>You can process each message one by one.</td></tr><tr><td>2300</td><td><a href="https://codeforces.com/problemset/problem/629/E">CF629E</a></td><td>The cycle can be divided into two parts.</td></tr></tbody></table><p>01.06</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/663/A">CF663A</a></td><td>If the numbers on the left side of the equations keep changing, what can the result be?</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/250/D">CF250D</a></td><td>Fix $j$ , what should be the best $i$ ?</td></tr></tbody></table><p>01.07</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/846/B">CF846B</a></td><td>Notice that the data range. Make use of the smaller ones.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/959/D">CF959D</a></td><td>Find the first different value of $a_i$ and $b_i$.</td></tr></tbody></table><p>01.08</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/789/B">CF789B</a></td><td>Special cases need to be taken care of.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/43/D">CF43D</a></td><td>Use chessboard coloring to prove the result.</td></tr></tbody></table><p>01.09</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/360/A">CF360A</a></td><td>Find the array that is most likely to satisfy all the conditions.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/629/C">CF629C</a></td><td>What really matters in the prefix and suffix?</td></tr></tbody></table><p>01.10</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/340/C">CF340C</a></td><td>Consider the occurence of each $|a_i-0|$ and $|a_i-a_j|$ .</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/286/C">CF286C</a></td><td>It’s about a bracket sequence.</td></tr></tbody></table><p>01.11</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/231/D">CF231D</a></td><td>Consider each face separately.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/115/C">CF115C</a></td><td>Consider horizontal lines and vertical lines separately.</td></tr></tbody></table><p>01.13</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/231/D">CF231D</a></td><td>Consider each face separately.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/115/C">CF115C</a></td><td>Consider horizontal lines and vertical lines separately.</td></tr></tbody></table><p>01.14</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/733/C">CF733C</a></td><td>The final array consists of a few segment sums.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1044/B">CF1044B</a></td><td>Use the result of the query to decide the next query.</td></tr></tbody></table><p>01.15</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1043/D">CF1043D</a></td><td>Consider the answer in one array and check it in the others.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1090/L">CF1090L</a></td><td>Consider whether the total classes and the classes in one auditorium is enough.</td></tr></tbody></table><p>01.16</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/831/C">CF831C</a></td><td>$b_1$ infers possible scores.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1057/C">CF1057C</a></td><td>The order of eating candies is actually determined by the number of candies in each box.</td></tr></tbody></table><p>01.17</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1482/C">CF1482C</a></td><td>The constraint is not that tight. There’s only one element you should consider.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/1725/F">CF1725F</a></td><td>Note that you can move both left and right using the bits of $k$ .</td></tr></tbody></table><p>01.18</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1722/E">CF1722E</a></td><td>$w_i,h_i$ are not large.</td></tr><tr><td>2400</td><td><a href="https://codeforces.com/problemset/problem/534/F">CF534F</a></td><td>It can be done by joining the left part and the right part together.</td></tr></tbody></table><p>01.20</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/182/E">CF182E</a></td><td>Classic knapsack DP.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1912/D">CF1912D</a></td><td>Translate the conditions into something about number theory.</td></tr></tbody></table><p>01.21</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/180/E">CF180E</a></td><td>Start from a cube, and find out which cubes to delete.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/553/B">CF553B</a></td><td>Find out the necessary pattern of the permutation.</td></tr></tbody></table><p>01.22</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1044/A">CF1044A</a></td><td>Some horizontal lines are just not important.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/615/C">CF615C</a></td><td>How can you find the longest substring that can match with the target substring (starting at $i$ )?</td></tr></tbody></table><p>01.23</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1032/C">CF1032C</a></td><td>Only the neighboring elements are constrained.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1157/F">CF1157F</a></td><td>Find out the conditions the frequencies of each element should satisfy.</td></tr></tbody></table><p>01.24</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/753/B">CF753B</a></td><td>If you find some information about the target, you can brute-force over the answer.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/466/E">CF466E</a></td><td>The tree can be pre-determined.</td></tr></tbody></table><p>01.25</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/518/A">CF518A</a></td><td>Consider the strings as numbers.</td></tr><tr><td>2400</td><td><a href="https://codeforces.com/problemset/problem/416/D">CF416D</a></td><td>The array can be determined by $2$ elements in it.</td></tr></tbody></table><p>01.27</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/167/B">CF167B</a></td><td>The volume of the bags doesn’t need to be large.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/374/C">CF374C</a></td><td>The whole grid is a graph. Check if it contains a cycle.</td></tr></tbody></table><p>01.28</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/853/B">CF853B</a></td><td>Each person can be considered separately.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/717/E">CF717E</a></td><td>Solve the problem from the subtrees.</td></tr></tbody></table><p>01.29</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/931/C">CF931C</a></td><td>There isn’t much to change.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1214/E">CF1214E</a></td><td>The distance is no larger than $n$ , so you can use a chain as a baseline.</td></tr></tbody></table><p>01.30</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1257/D">CF1257D</a></td><td>For each index $i$ , you can find out the perfect hero to conquer as many monsters as you want.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/427/E">CF427E</a></td><td>The choice is on one of the given points.</td></tr></tbody></table><p>01.31</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1281/B">CF1281B</a></td><td>Find the first character that can be replaced by something small.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/748/D">CF748D</a></td><td>Strings come in pairs.</td></tr></tbody></table><h3 id="02月-1"><a href="#02月-1" class="headerlink" title="02月"></a>02月</h3><p>02.01</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1137/A">CF1137A</a></td><td>What determines the answer?</td></tr><tr><td>2400</td><td><a href="https://codeforces.com/problemset/problem/1070/I">CF1070I</a></td><td>Find out the purpose of painting two edges into the same color.</td></tr></tbody></table><p>02.03</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/1109/B">CF1109B</a></td><td>First of all, ignore that you need to minimize the number of steps and find a way to make another palindrome.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/457/B">CF457B</a></td><td>There are only a few ways that are possible.</td></tr></tbody></table><p>02.04</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/730/A">CF730A</a></td><td>There are not that many kinds of operations.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1012/C">CF1012C</a></td><td>What is the cost when two houses are chosen with the houses between them unchosen?</td></tr></tbody></table><p>02.05</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/924/C">CF924C</a></td><td>The marks should overlap.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/382/B">CF382B</a></td><td>How does $a-c$ change?</td></tr></tbody></table><p>02.06</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/627/B">CF627B</a></td><td>Find out the formula of the result. It’s easy to update and query.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1183/G">CF1183G</a></td><td>Use greedy approach to find the largest number of candies. Then decide the types of the candies.</td></tr></tbody></table><p>02.07</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="http://codeforces.com/problemset/problem/1017/C">CF1017C</a></td><td>Dilworth’s theorem.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/1028/D">CF1028D</a></td><td>Think about which prices should be in the buying list and which prices should be in the selling list.</td></tr></tbody></table><p>02.08</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1452/D">CF1452D</a></td><td>Find out the conditions to satisfy and the DP function accordingly.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/627/C">CF627C</a></td><td>The decision whether or not add gas at one station is based on the future. Wait, we know the future.</td></tr></tbody></table><p>02.10</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/1082/D">CF1082D</a></td><td>Construct a chain first and then add nodes on it.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/630/E">CF630E</a></td><td>Count each vertical line.</td></tr></tbody></table><p>02.11</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/979/B">CF979B</a></td><td>The length of the subribbon should be $1$ .</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1184/E1">CF1184E1</a></td><td>Consider the vertices in the edge $1$ as one first.</td></tr></tbody></table><p>02.12</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/518/D">CF518D</a></td><td>How does the people in the queue change in one second?</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/758/D">CF758D</a></td><td>The digits from the back should be as large as possible.</td></tr></tbody></table><p>02.13</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/729/C">CF729C</a></td><td>Consider the cost between two gas stations. How does it change with the tank capacity?</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/237/E">CF237E</a></td><td>Paying to satisfy the conditions and distribution the characters to choose: flow problem.</td></tr></tbody></table><p>02.14</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/939/D">CF939D</a></td><td>It’s all about connecting characters.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/520/D">CF520D</a></td><td>Each step should be optimized.</td></tr></tbody></table><p>02.15</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/660/C">CF660C</a></td><td>Typical sliding window.</td></tr><tr><td>2400</td><td><a href="https://codeforces.com/problemset/problem/1282/E">CF1282E</a></td><td>First of all, you can decide the edges of the polygon: they apear only once.</td></tr></tbody></table><p>02.17</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/772/A">CF772A</a></td><td>If the time is fixed, which devices should you charge?</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/700/A">CF700A</a></td><td>Divide the pupils into groups. Each group should use the same amount of time on the bus.</td></tr></tbody></table><p>02.18</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/190/B">CF190B</a></td><td>Consider the possible positional relationship of two circles.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1141/G">CF1141G</a></td><td>Decide the answer first.</td></tr></tbody></table><p>02.19</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/540/B">CF540B</a></td><td>You just need to find out the minimum sum of marks.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/855/C">CF855C</a></td><td>Each vertice has three kinds of status.</td></tr></tbody></table><p>02.20</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1227/C">CF1227C</a></td><td>Use two operations to swap two elements.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/263/C">CF263C</a></td><td>What is the property of the two neighboring vertices?</td></tr></tbody></table><p>02.21</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/643/B">CF643B</a></td><td>Find the minimum number of edges you needed.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/1510/D">CF1510D</a></td><td>The numbers not chosen are limited.</td></tr></tbody></table><p>02.22</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1036/B">CF1036B</a></td><td>Find the minimum number of steps first. How many of them can be diagonal?</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/1227/E">CF1227E</a></td><td>Each burned tree turned into a square.</td></tr></tbody></table><p>02.24</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/222/C">CF222C</a></td><td>Find the prime factors to delete and then delete them</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1689/D">CF1689D</a></td><td>The result of a absolute function can be transformed into a maximum result of linear functions.</td></tr></tbody></table><p>02.25</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/592/C">CF592C</a></td><td>What should the final length be?</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/930/C">CF930C</a></td><td>How can you check if the current result can be formed with all intervals containing one integer?</td></tr></tbody></table><p>02.26</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1320/B">CF1320B</a></td><td>You should calculate the distance to the destination.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/374/A">CF374A</a></td><td>Where can you go from $(i, j)$ ? How can you calculate the number of moves?</td></tr></tbody></table><p>02.27</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/923/A">CF923A</a></td><td>If $X_i$ is fixed, find out about $X_{i-1}$ .</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1599/C">CF1599C</a></td><td>If you study $k$ maps, what is the probability to play one of them?</td></tr></tbody></table><p>02.28</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1468/K">CF1468K</a></td><td>The obstacle need to block the way.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/1267/K">CF1267K</a></td><td>It’s just about how many permutations of the given array is valid. What’s the condition of being valid?</td></tr></tbody></table><h3 id="03月-1"><a href="#03月-1" class="headerlink" title="03月"></a>03月</h3><p>03.01</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1238/C">CF1238C</a></td><td>What is the bad thing that causes you to use the magic crystal?</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/1225/E">CF1225E</a></td><td>Once you leave a column &#x2F; row, it means nothing to you.</td></tr></tbody></table><p>03.03</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/958/F2">CF958F2</a></td><td>Classic two pointers.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/803/D">CF803D</a></td><td>If $x$ is enough, $x + 1$ is always enough.</td></tr></tbody></table><p>03.04</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/923/C">CF923C</a></td><td>You need to find a data structure that can do something like: deleting an element, find the maximum XOR value with $x$ .</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1611/E2">CF1611E2</a></td><td>Which nodes does your friend forbid you to go?</td></tr></tbody></table><p>03.05</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/439/C">CF439C</a></td><td>Enough odd numbers and enough partitions.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/187/C">CF187C</a></td><td>If you got a value $q$ , how can you get the connected component where any two vertices can reach each other?</td></tr></tbody></table><p>03.06</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1340/B">CF1340B</a></td><td>Make the first digit large enough and make it possible for the latter digits.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/2052/J">CF2052J</a></td><td>For a given $t$ , how should you arrange the activities?</td></tr></tbody></table><p>03.07</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1875/D">CF1875D</a></td><td>The MEX of the array changes only a few times.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/1866/H">CF1866H</a></td><td>For each array of sets, there can be only one order that satisfies the conditions.</td></tr></tbody></table><p>03.08</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/756/B">CF756B</a></td><td>Iterate over the last ticket.</td></tr><tr><td>2400</td><td><a href="https://codeforces.com/problemset/problem/1080/E">CF1080E</a></td><td>Fix $(j_1,j_2)$ to find the possible $(i_1,i_2)$.</td></tr></tbody></table><p>03.10</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/675/D">CF675D</a></td><td>Find a rule of the parent node.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/909/E">CF909E</a></td><td>It’s just rounds of task completion.</td></tr></tbody></table><p>03.11</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/123/B">CF123B</a></td><td>It’s about crossing lines. You can cross $2$ at a time.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/342/C">CF342C</a></td><td>There are only a few ways to put the balloons.</td></tr></tbody></table><p>03.12</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1906/M">CF1906M</a></td><td>Find different upper bounds.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/542/C">CF542C</a></td><td>Consider the array as a graph. What does the final answer satisfy?</td></tr></tbody></table><p>03.13</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/980/C">CF980C</a></td><td>Still. Lexicographically smallest. From the front, greedily choose. Notice the constraint of $k$ .</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/193/B">CF193B</a></td><td>The operations can’t be fully comprehended when they are mixed, so there is only one way …</td></tr></tbody></table><p>03.14</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/733/D">CF733D</a></td><td>For each stone, find its perfect match.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/342/D">CF342D</a></td><td>How can you move a domino?</td></tr></tbody></table><p>03.15</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/595/B">CF595B</a></td><td>Just calculate the answer for each part.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/305/D">CF305D</a></td><td>There are some basic rules for this graph.</td></tr></tbody></table><p>03.17</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/883/K">CF883K</a></td><td>Let’s maximize the $s_i’$ of each part.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1977/C">CF1977C</a></td><td>Two kinds: whether LCM is $\max(a_i)$ or not.</td></tr></tbody></table><p>03.18</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/1955/F">CF1955F</a></td><td>It’s just about maximizing the number of $0$ in suffix-XOR-sum.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/848/B">CF848B</a></td><td>On what condition does the dancers collide? After collision, if you don’t care which is which, they look like they are on the original route.</td></tr></tbody></table><p>03.19</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1850/H">CF1850H</a></td><td>It’s about contradiction in a graph.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/2041/M">CF2041M</a></td><td>If you sort $[1,i]$, what is your next move?</td></tr></tbody></table><p>03.20</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/910/C">CF910C</a></td><td>Let’s see the weight of each character.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1956/D">CF1956D</a></td><td>If there is a segment that is operated, what is its maximum sum?</td></tr></tbody></table><p>03.21</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/214/B">CF214B</a></td><td>You don’t need to delete many characters.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/590/B">CF590B</a></td><td>If you can get to the destination in $t$ seconds, it’s always possible to get there in $t’(t’\gt t)$ seconds.</td></tr></tbody></table><p>03.22</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/617/C">CF617C</a></td><td>Iterate over what flower is in the range of the first fountain. Special case: no flowers.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/332/C">CF332C</a></td><td>If the orders are chosen, how should the chairperson choose? Sort the array so that this part comes easy.</td></tr></tbody></table><p>03.24</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/404/C">CF404C</a></td><td>When a vertex connects with its previous vertex in the shortest path, a tree is formed.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1089/F">CF1089F</a></td><td>Turn $b$ all into $n$ , then each $a$ is not coprime to $n$ and sums up to $n-1$ .</td></tr></tbody></table><p>03.25</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/638/C">CF638C</a></td><td>Color the edge in the day it is repaired.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/488/B">CF488B</a></td><td>Solve the equation first.</td></tr></tbody></table><p>03.26</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/718/A">CF718A</a></td><td>We should find the first position after the decimal point which is no smaller than $5$ .</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/291/E">CF291E</a></td><td>Consider the problem in DFS. It’s about checking the number of occurences of string $t$ in $s$ when adding or removing a last character.</td></tr></tbody></table><p>03.27</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1202/B">CF1202B</a></td><td>There are some repetitive pairs.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1951/D">CF1951D</a></td><td>If $k$ is small enough, it’s always easy.</td></tr></tbody></table><p>03.28</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1202/B">CF1202B</a></td><td>There are some repetitive pairs.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1951/D">CF1951D</a></td><td>If $k$ is small enough, it’s always easy.</td></tr></tbody></table><p>03.29</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/380/A">CF380A</a></td><td>It is such a repetitive array, and it can be divided into several parts.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/757/D">CF757D</a></td><td>The largest number can’t get too large.</td></tr></tbody></table><p>03.31</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/255/D">CF255D</a></td><td>Use inclusion-exlusion method to calculate the number of cells switched on.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/847/I">CF847I</a></td><td>Noise can’t get too far.</td></tr></tbody></table><h3 id="04月-1"><a href="#04月-1" class="headerlink" title="04月"></a>04月</h3><p>04.01</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/691/C">CF691C</a></td><td>You just need to decide the two parts of the expression.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/336/B">CF336B</a></td><td>For different $(i,j)$ -s, How should you get from $(2iR-R, 0)$ to $(2jR-R, 2R)$.</td></tr></tbody></table><p>04.02</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/766/C">CF766C</a></td><td>Just $3$ DP-s.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/1090/K">CF1090K</a></td><td>Focus on the infinite part.</td></tr></tbody></table><p>04.03</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/405/D">CF405D</a></td><td>Pair the numbers. What if the paired numbers are already chosen?</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/911/E">CF911E</a></td><td>How can you check whether a permutation satisfy the conditions?</td></tr></tbody></table><p>04.04</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/1530/D">CF1530D</a></td><td>Find positions to change and numbers they get changed into.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/386/D">CF386D</a></td><td>Classic shortest path problem.</td></tr></tbody></table><p>04.05</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/715/A">CF715A</a></td><td>Consider what property the number should have before $\sqrt{}$ operation.</td></tr><tr><td>2300</td><td><a href="https://codeforces.com/problemset/problem/1090/E">CF1090E</a></td><td>It’s always possible to go from $(x,y)$ to $(x’,y’)$ .</td></tr></tbody></table><p>04.07</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/83/B">CF83B</a></td><td>Which round is it?</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1938/C">CF1938C</a></td><td>$p(x+1)\leq p(x)$ means something.</td></tr></tbody></table><p>04.08</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/727/D">CF727D</a></td><td>Some are fixed. Others can be greedily distributed.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/412/E">CF412E</a></td><td>There is exactly one <code>&#39;@&#39;</code> in each email.</td></tr></tbody></table><p>04.09</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/442/A">CF442A</a></td><td>Iterate over all possible combinations of hints.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/29/D">CF29D</a></td><td>If you are at $u$ , where should you go?</td></tr></tbody></table><p>04.10</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/925/B">CF925B</a></td><td>If you decide to use some of the servers, re-distribute them between services.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/413/D">CF413D</a></td><td>What’s remaining for merging?</td></tr></tbody></table><p>04.11</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/272/D">CF272D</a></td><td>Which points can be swapped in the final sequence?</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/212/C">CF212C</a></td><td>If you know the original direction and the current direction of $i$ , you can decide that of $i + 1$ .</td></tr></tbody></table><p>04.12</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/605/A">CF605A</a></td><td>Consider the number of cars that are not moved.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/1089/A">CF1089A</a></td><td>Pre-process the DP.</td></tr></tbody></table><p>04.14</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/630/M">CF630M</a></td><td>If you rotate the camera $x$ times, how far is it from being vertical?</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/258/B">CF258B</a></td><td>Group the numbers.</td></tr></tbody></table><p>04.15</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/187/B">CF187B</a></td><td>Consider the path in segments and each segment is composed of one car. In each segment, if you go from $u$ to $v$ , you can pre-process the minimum time. So you can iterate over the number of segments.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/353/B">CF353B</a></td><td>Distribute the numbers evenly.</td></tr></tbody></table><p>04.16</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/187/B">CF187B</a></td><td>Consider the path in segments and each segment is composed of one car. In each segment, if you go from $u$ to $v$ , you can pre-process the minimum time. So you can iterate over the number of segments.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/353/B">CF353B</a></td><td>Distribute the numbers evenly.</td></tr></tbody></table><p>04.17</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1835/A">CF1835A</a></td><td>Iterate over $a$ . What can be $b$ ?</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/676/D">CF676D</a></td><td>Rotating $4$ times means nothing.</td></tr></tbody></table><p>04.18</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/603/A">CF603A</a></td><td>Classic DP. Or …?</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/1938/J">CF1938J</a></td><td>You just need to find the $2$ shortest path from $1$ to $n$ .</td></tr></tbody></table><p>04.19</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/317/A">CF317A</a></td><td>Make both positive. Then what should you do?</td></tr><tr><td>2400</td><td><a href="https://codeforces.com/problemset/problem/200/A">CF200A</a></td><td>There are only a few rows that you need to check!</td></tr></tbody></table><p>04.21</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/87/B">CF87B</a></td><td>Just implement it.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1277/D">CF1277D</a></td><td>There are $4$ types of strings.</td></tr></tbody></table><p>04.22</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/847/C">CF847C</a></td><td>Just make sure you can make another move.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/490/D">CF490D</a></td><td>Two operations are adjusting the power of $2$ and $3$ in the numbers.</td></tr></tbody></table><p>04.23</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1092/C">CF1092C</a></td><td>You just need to find the concatenation of the two longest substrings.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/818/C">CF818C</a></td><td>You just need to calculate the number of sofas to the left &#x2F; right &#x2F; upside &#x2F; downside of one position.</td></tr></tbody></table><p>04.24</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/1468/D">CF1468D</a></td><td>Do something bad and run.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/234/H">CF234H</a></td><td>The second step is easy to optimize and you can calculate the total number of moves. How’s it determined? Use the first step to make it fewer.</td></tr></tbody></table><p>04.25</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/793/B">CF793B</a></td><td>DFS or you can check something different.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/362/D">CF362D</a></td><td>Greedily merge the components.</td></tr></tbody></table><p>04.26</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/616/C">CF616C</a></td><td>Classic DSU.</td></tr><tr><td>2200</td><td><a href="https://codeforces.com/problemset/problem/593/C">CF593C</a></td><td>A formula for each circle.</td></tr></tbody></table><p>04.28</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/845/D">CF845D</a></td><td>It’s about how many rules you disobey. The harder one is the speed limit.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/1423/B">CF1423B</a></td><td>If we have a deadline, there are only a few roads that can be built. They represent the possible pairs that can be formed.</td></tr></tbody></table><p>04.29</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/690/E1">CF690E1</a></td><td>Find the special characteristic.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/367/B">CF367B</a></td><td>If you delete one element and add another one, can you check the condition efficiently?</td></tr></tbody></table><p>04.30</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/269/B">CF269B</a></td><td>Find the maximum number of plants that don’t need to be moved.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/2073/J">CF2073J</a></td><td>It’s about merging to $2$ remaining elements together.</td></tr></tbody></table><h3 id="05月-1"><a href="#05月-1" class="headerlink" title="05月"></a>05月</h3><p>05.01</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/617/D">CF617D</a></td><td>What are the different cases?</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/433/D">CF433D</a></td><td>What data do you need to find the answer?</td></tr></tbody></table><p>05.02</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/375/B">CF375B</a></td><td>Iterate over the right bound.</td></tr><tr><td>2100</td><td><a href="https://codeforces.com/problemset/problem/631/D">CF631D</a></td><td>The middle part should be exactly the same.</td></tr></tbody></table><p>05.03</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1600</td><td><a href="https://codeforces.com/problemset/problem/599/C">CF599C</a></td><td>Don’t use any kind of data structures..</td></tr><tr><td>2400</td><td><a href="https://codeforces.com/problemset/problem/679/C">CF679C</a></td><td>Iterate over the position of the square. What should you pre-process?</td></tr></tbody></table><p>05.05</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/89/A">CF89A</a></td><td>How many diamonds should you move if you take out one of them?</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/685/B">CF685B</a></td><td>If $v$ is the son of $u$ with the subtree of the largest size, the centroid of the subtree of $u$ is also an ancestor of the centroid of the subtree of $v$ .</td></tr></tbody></table><h4 id="CF89A-Robbery"><a href="#CF89A-Robbery" class="headerlink" title="CF89A. Robbery"></a>CF89<a href="https://codeforces.com/problemset/problem/89/A">A. Robbery</a></h4><blockquote><p>time limit per test 1 second</p><p>memory limit per test 256 megabytes</p></blockquote><p>It is nighttime and Joe the Elusive got into the country’s main bank’s safe. The safe has <em>n</em> cells positioned in a row, each of them contains some amount of diamonds. Let’s make the problem more comfortable to work with and mark the cells with positive numbers from 1 to <em>n</em> from the left to the right.</p><p>Unfortunately, Joe didn’t switch the last security system off. On the plus side, he knows the way it works.</p><p>Every minute the security system calculates the total amount of diamonds for each two adjacent cells (for the cells between whose numbers difference equals 1). As a result of this check we get an <em>n</em> - 1 sums. If at least one of the sums differs from the corresponding sum received during the previous check, then the security system is triggered.</p><p>Joe can move the diamonds from one cell to another between the security system’s checks. He manages to move them no more than <em>m</em> times between two checks. One of the three following operations is regarded as moving a diamond: moving a diamond from any cell to any other one, moving a diamond from any cell to Joe’s pocket, moving a diamond from Joe’s pocket to any cell. Initially Joe’s pocket is empty, and it can carry an unlimited amount of diamonds. It is considered that before all Joe’s actions the system performs at least one check.</p><p>In the morning the bank employees will come, which is why Joe has to leave the bank before that moment. Joe has only <em>k</em> minutes left before morning, and on each of these <em>k</em> minutes he can perform no more than <em>m</em> operations. All that remains in Joe’s pocket, is considered his loot.</p><p>Calculate the largest amount of diamonds Joe can carry with him. Don’t forget that the security system shouldn’t be triggered (even after Joe leaves the bank) and Joe should leave before morning.</p><p>Input</p><p>The first line contains integers <em>n</em>, <em>m</em> and <em>k</em> (1 ≤ <em>n</em> ≤ 104, 1 ≤ <em>m</em>, <em>k</em> ≤ 109). The next line contains <em>n</em> numbers. The <em>i</em>-th number is equal to the amount of diamonds in the <em>i</em>-th cell — it is an integer from 0 to 105.</p><p>Output</p><p>Print a single number — the maximum number of diamonds Joe can steal.</p><p>Examples</p><p>Input</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2 3 1</span><br><span class="line">2 3</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><p>Input</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3 2 2</span><br><span class="line">4 1 3</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p>Note</p><p>In the second sample Joe can act like this:</p><p>The diamonds’ initial positions are 4 1 3.</p><p>During the first period of time Joe moves a diamond from the 1-th cell to the 2-th one and a diamond from the 3-th cell to his pocket.</p><p>By the end of the first period the diamonds’ positions are 3 2 2. The check finds no difference and the security system doesn’t go off.</p><p>During the second period Joe moves a diamond from the 3-rd cell to the 2-nd one and puts a diamond from the 1-st cell to his pocket.</p><p>By the end of the second period the diamonds’ positions are 2 3 1. The check finds no difference again and the security system doesn’t go off.</p><p>Now Joe leaves with 2 diamonds in his pocket.</p><h5 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h5><p>输入：第一行输入单元格数n、操作次数m、时间k，第二行输入每个单元格的钻石数量</p><p>在k分钟时间内进行m次操作，求其能够带走的钻石数量的最大值。</p><p>输出：其能够带走的钻石数量的最大值</p><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><p>分情况讨论：</p><ol><li><strong>当 <code>n</code> 为偶数</strong>：<ul><li>直接输出 <code>0</code>，因为无法完成有效操作，无法覆盖所有必要的位置。</li></ul></li><li><strong>当 <code>n</code> 为奇数</strong>：<ul><li>计算最大可能收益：<ul><li><code>(n / 2 + 1)</code>：表示需要的操作次数（如 <code>n=5</code> 时需要 <code>3</code> 次操作）。</li><li><code>m / (n / 2 + 1)</code>：可执行的最大完整操作次数。</li><li><code>* k</code>：每次操作的时间收益。</li></ul></li><li>最终结果为 <code>val</code> 和计算值的较小者。</li></ul></li></ol><h6 id="AC-Code："><a href="#AC-Code：" class="headerlink" title="AC Code："></a>AC Code：</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;bits/stdc++.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201703L</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAFE_MODE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAFE_MODE 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m, k;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">ll val = <span class="number">1e9</span>, x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) val = <span class="built_in">min</span> (val, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="built_in">min</span> (val, <span class="number">1ll</span> * m / (n / <span class="number">2</span> + <span class="number">1</span>) * k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>05.06</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1800</td><td><a href="https://codeforces.com/problemset/problem/794/C">CF794C</a></td><td>A greedy approach. But think carefully.</td></tr><tr><td>1900</td><td><a href="https://codeforces.com/problemset/problem/653/C">CF653C</a></td><td>Note that the sequence is not nice now.</td></tr></tbody></table><p>05.07</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/245/C">CF245C</a></td><td>It’s a binary tree. Just operate from the leaves.</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/82/C">CF82C</a></td><td>It’s allowed to solve the problem in $\mathcal{O}(n^2)$ .</td></tr></tbody></table><p>05.08</p><table><thead><tr><th>Difficulty</th><th>Problems</th><th>Hints</th></tr></thead><tbody><tr><td>1700</td><td><a href="https://codeforces.com/problemset/problem/605/B">CF605B</a></td><td>If you have a minimum spanning tree of the graph, how can you add an edge to the graph without changing the MST?</td></tr><tr><td>2000</td><td><a href="https://codeforces.com/problemset/problem/662/D">CF662D</a></td><td>Take notice of the leading zeros.</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Daily-CF题解&quot;&gt;&lt;a href=&quot;#Daily-CF题解&quot; class=&quot;headerlink&quot; title=&quot;Daily_CF题解&quot;&gt;&lt;/a&gt;Daily_CF题解&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本文记录JiangnanPsalter参与&lt;a h</summary>
      
    
    
    
    <category term="我的基础算法笔记" scheme="https://touristdaughter.cyou/categories/%E6%88%91%E7%9A%84%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>CF977F题解</title>
    <link href="https://touristdaughter.cyou/2025/05/05/CF977F/"/>
    <id>https://touristdaughter.cyou/2025/05/05/CF977F/</id>
    <published>2025-05-05T07:14:20.040Z</published>
    <updated>2025-05-06T03:23:42.943Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目来源：<a href="https://codeforces.com/contest/977/problem/F">CF977F. Consecutive Subsequence</a></p></blockquote><h1 id="F-Consecutive-Subsequence"><a href="#F-Consecutive-Subsequence" class="headerlink" title="F. Consecutive Subsequence"></a>F. Consecutive Subsequence</h1><blockquote><p>time limit per test 2 seconds<br>memory limit per test 256 megabytes</p></blockquote><p>You are given an integer array of length n.</p><p>You have to choose some subsequence of this array of maximum length such that this subsequence forms a increasing sequence of consecutive integers. In other words the required sequence should be equal to [x,x+1,…,x+k−1][x,x+1,…,x+k−1] for some value x and length k.</p><p>Subsequence of an array can be obtained by erasing some (possibly zero) elements from the array. You can erase any elements, not necessarily going successively. The remaining elements preserve their order. For example, for the array [5,3,1,2,4] the following arrays are subsequences: [3], [5,3,1,2,4], [5,1,4], but the array [1,3] is not.</p><p>Input</p><p>The first line of the input containing integer number n (1≤n≤2⋅1051≤n≤2⋅105) — the length of the array. The second line of the input containing n integer numbers a1,a2,…,an (1≤ai≤1091≤ai≤109) — the array itself.</p><p>Output</p><p>On the first line print k — the maximum length of the subsequence of the given array that forms an increasing sequence of consecutive integers.</p><p>On the second line print the sequence of the indices of the <strong>any</strong> maximum length subsequence of the given array that forms an increasing sequence of consecutive integers.</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">3 3 4 7 5 6 8</span><br></pre></td></tr></table></figure><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">2 3 5 6 </span><br></pre></td></tr></table></figure><h4 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">1 3 5 2 4 6</span><br></pre></td></tr></table></figure><h4 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">1 4 </span><br></pre></td></tr></table></figure><h4 id="Input-2"><a href="#Input-2" class="headerlink" title="Input"></a>Input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">10 9 8 7</span><br></pre></td></tr></table></figure><h4 id="Output-2"><a href="#Output-2" class="headerlink" title="Output"></a>Output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1 </span><br></pre></td></tr></table></figure><h4 id="Input-3"><a href="#Input-3" class="headerlink" title="Input"></a>Input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">6 7 8 3 4 5 9 10 11</span><br></pre></td></tr></table></figure><h4 id="Output-3"><a href="#Output-3" class="headerlink" title="Output"></a>Output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">1 2 3 7 8 9 </span><br></pre></td></tr></table></figure><h4 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h4><p>All valid answers for the first example (as sequences of indices):</p><ul><li>[1,3,5,6]</li><li>[2,3,5,6]</li></ul><p>All valid answers for the second example:</p><ul><li>[1,4]</li><li>[2,5]</li><li>[3,6]</li></ul><p>All valid answers for the third example:</p><ul><li>[1]</li><li>[2]</li><li>[3]</li><li>[4]</li></ul><p>All valid answers for the fourth example:</p><ul><li>[1,2,3,7,8,9]</li></ul><h2 id="题意：先输入原序列的长度和数组，题意简单来说就是找到原序列的最长连续递增子序列，然后输出长度（个数）和最长连续递增子序列在原序列中的1-based索引"><a href="#题意：先输入原序列的长度和数组，题意简单来说就是找到原序列的最长连续递增子序列，然后输出长度（个数）和最长连续递增子序列在原序列中的1-based索引" class="headerlink" title="题意：先输入原序列的长度和数组，题意简单来说就是找到原序列的最长连续递增子序列，然后输出长度（个数）和最长连续递增子序列在原序列中的1-based索引"></a>题意：先输入原序列的长度和数组，题意简单来说就是找到原序列的最长连续递增子序列，然后输出长度（个数）和最长连续递增子序列在原序列中的1-based索引</h2><h2 id="思路：哈希记录每个数值最后出现的位置，检查前驱和动态规划状态转移，最后逆向回溯构建结果序列、反转得到正序-输出结果"><a href="#思路：哈希记录每个数值最后出现的位置，检查前驱和动态规划状态转移，最后逆向回溯构建结果序列、反转得到正序-输出结果" class="headerlink" title="思路：哈希记录每个数值最后出现的位置，检查前驱和动态规划状态转移，最后逆向回溯构建结果序列、反转得到正序 输出结果"></a>思路：哈希记录每个数值最后出现的位置，检查前驱和动态规划状态转移，最后逆向回溯构建结果序列、反转得到正序 输出结果</h2><h2 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;bits/stdc++.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N], dp[N], prev_idx[N];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201703L</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAFE_MODE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAFE_MODE 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="comment">// 预处理每个数值的最近索引</span></span><br><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; last_pos;</span><br><span class="line"><span class="type">int</span> max_len = <span class="number">0</span>, best_end = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line"><span class="type">int</span> val = a[i];</span><br><span class="line">        <span class="comment">// 检查前驱元素是否存在</span></span><br><span class="line"><span class="keyword">if</span> (last_pos.<span class="built_in">find</span>(val - <span class="number">1</span>) != last_pos.<span class="built_in">end</span>()) &#123;</span><br><span class="line"><span class="type">int</span> j = last_pos[val - <span class="number">1</span>];</span><br><span class="line">dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">prev_idx[i] = j;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">dp[i] = <span class="number">1</span>;</span><br><span class="line">prev_idx[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 更新当前数值的最近位置</span></span><br><span class="line">last_pos[val] = i;</span><br><span class="line">        <span class="comment">// 记录最长子序列信息</span></span><br><span class="line"><span class="keyword">if</span> (dp[i] &gt; max_len) &#123;</span><br><span class="line">max_len = dp[i];</span><br><span class="line">best_end = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 逆向构造结果</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = best_end; i != <span class="number">-1</span>; i = prev_idx[i]) &#123;</span><br><span class="line">res.<span class="built_in">push_back</span>(i + <span class="number">1</span>);<span class="comment">// 转换为1-based索引</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">reverse</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, max_len);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> x : res) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;题目来源：&lt;a href=&quot;https://codeforces.com/contest/977/problem/F&quot;&gt;CF977F. Consecutive Subsequence&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;F-</summary>
      
    
    
    
    <category term="我的基础算法笔记" scheme="https://touristdaughter.cyou/categories/%E6%88%91%E7%9A%84%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>永不熄灭的火焰：在抗争中书写人类尊严的史诗</title>
    <link href="https://touristdaughter.cyou/2025/04/30/%E6%B0%B8%E4%B8%8D%E7%86%84%E7%81%AD%E7%9A%84%E7%81%AB%E7%84%B0%EF%BC%9A%E5%9C%A8%E6%8A%97%E4%BA%89%E4%B8%AD%E4%B9%A6%E5%86%99%E4%BA%BA%E7%B1%BB%E5%B0%8A%E4%B8%A5%E7%9A%84%E5%8F%B2%E8%AF%97/"/>
    <id>https://touristdaughter.cyou/2025/04/30/%E6%B0%B8%E4%B8%8D%E7%86%84%E7%81%AD%E7%9A%84%E7%81%AB%E7%84%B0%EF%BC%9A%E5%9C%A8%E6%8A%97%E4%BA%89%E4%B8%AD%E4%B9%A6%E5%86%99%E4%BA%BA%E7%B1%BB%E5%B0%8A%E4%B8%A5%E7%9A%84%E5%8F%B2%E8%AF%97/</id>
    <published>2025-04-30T03:23:44.018Z</published>
    <updated>2025-04-30T03:25:37.540Z</updated>
    
    <content type="html"><![CDATA[<h1 id="永不熄灭的火焰：在抗争中书写人类尊严的史诗"><a href="#永不熄灭的火焰：在抗争中书写人类尊严的史诗" class="headerlink" title="永不熄灭的火焰：在抗争中书写人类尊严的史诗"></a>永不熄灭的火焰：在抗争中书写人类尊严的史诗</h1><p> “要<code>敢于拒绝不合理的要求</code>、<code>敢于维护自己的权力</code>、<code>敢于为避免未来与你一样的千千万后来者经历你正在经历的不公而积极抗争</code>“，这三个”敢于”如同刻在人类基因里的密码，在雅典卫城的石柱上、在工业革命的蒸汽中、在数字时代的代码里反复显影。从苏格拉底饮下毒酒时嘴角的冷笑，到现代职场人合上加班电脑的坚决，抗争精神始终是文明进程中最炽热的火炬。</p><h2 id="一、第一重觉醒：拒绝不合理要求的勇气"><a href="#一、第一重觉醒：拒绝不合理要求的勇气" class="headerlink" title="一、第一重觉醒：拒绝不合理要求的勇气"></a>一、第一重觉醒：拒绝不合理要求的勇气</h2><p> 公元前399年的雅典法庭上，苏格拉底面对死亡威胁说出：”只要我一息尚存，就绝不停止哲学思考。”这位被德尔斐神谕称为”最智慧的人”，用生命诠释了何为拒绝思想禁锢的勇气。当陪审团以280票对220票判处他死刑时，他拒绝弟子安排的逃亡计划，在饮下毒芹汁前仍在讨论灵魂不朽——这种对真理的坚守，比任何法律文书都更早定义了思想自由的权利边界。</p><p> 这种抗争基因在现代职场迸发出新的火花。杭州互联网法院2023年审理的”隐形加班案”中，设计师李婷用365页聊天记录作为证据，拒绝企业将加班包装成”奋斗者文化”的阴谋。她的胜诉不仅追回8万元加班费，更推动最高人民法院出台《关于审理涉数字经济劳动争议案件若干问题的指导意见》。正如古罗马法学家西塞罗所言：”权利不是恩赐，而是沉睡者永远无法获得的战利品。”</p><h2 id="二、第二重突破：维护自身权力的智慧"><a href="#二、第二重突破：维护自身权力的智慧" class="headerlink" title="二、第二重突破：维护自身权力的智慧"></a>二、第二重突破：维护自身权力的智慧</h2><p> 1955年12月1日，42岁的黑人裁缝罗莎·帕克斯在蒙哥马利公交车上挺直脊梁时，她膝盖上细密的针脚正编织着整个族群的尊严图谱。”那不只是个座位，那是宪法第十四修正案在向我招手”，她在自传中写道。这个看似微小的抗争，像蝴蝶振翅引发海啸，催生了持续381天的罢乘运动，最终让美国最高法院判决公交种族隔离违宪。</p><p> 当代青年用法律武器延续着这种智慧抗争。当某互联网大厂试图用”奋斗者协议”绕过劳动法时，95后程序员陈默在离职证明上写下：”本人拒绝签署任何违反《劳动法》第三十六条的条款”。这种个体觉醒正在重构商业伦理，北京朝阳区劳动仲裁院2023年数据显示，90后劳动者维权胜诉率较五年前提升47%，证明着”妥协从来换不来尊重，权利永远需要自己捍卫”的真理。</p><h2 id="三、第三重超越：为后来者开路的担当"><a href="#三、第三重超越：为后来者开路的担当" class="headerlink" title="三、第三重超越：为后来者开路的担当"></a>三、第三重超越：为后来者开路的担当</h2><p> 二十世纪初的伦敦街头，艾米琳·潘克赫斯特带领妇女参政论者用血肉之躯撞击唐宁街的铁门时，曾宣言：”我们不仅要打破自己的镣铐，更要碾碎所有女性未来的枷锁。”当她们被关进霍洛威监狱仍坚持绝食抗议时，或许已预见百年后德国总理默克尔在玻璃天花板破碎声中走向权力巅峰的身影。</p><p> 这种跨时空的守护在东京地铁沙林事件后得到新生。受害者家属成立”奥姆真理教追踪者协会”，不仅推动日本出台《团体规制法》，更建立全民邪教预警系统。他们用二十年时间编纂的《精神控制防御手册》，如今已成为35个国家公民教育的必修课。正如发起人高桥哲也所说：”我们今天流的每一滴血，都要化作后人的疫苗。”</p><p> 站在AI与算法统治的悬崖边，那个在雅典街头追问真理的苏格拉底，那个在公交车上挺直脊梁的罗莎·帕克斯，依然在时空长廊里注视着我们。他们用生命点亮的火种提醒着：当你在会议桌上拒绝无理加班时，当你在租房合同里划去霸王条款时，当你在社交媒体为不公发声时，都是在续写这部横贯三千年的抗争史诗。<code>永远保持热情，永远坚持抗争，永远独立思考</code>——这不是可选项，而是生而为人必须接过的历史火炬。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;永不熄灭的火焰：在抗争中书写人类尊严的史诗&quot;&gt;&lt;a href=&quot;#永不熄灭的火焰：在抗争中书写人类尊严的史诗&quot; class=&quot;headerlink&quot; title=&quot;永不熄灭的火焰：在抗争中书写人类尊严的史诗&quot;&gt;&lt;/a&gt;永不熄灭的火焰：在抗争中书写人类尊严的史诗&lt;/</summary>
      
    
    
    
    <category term="博主的观点和态度" scheme="https://touristdaughter.cyou/categories/%E5%8D%9A%E4%B8%BB%E7%9A%84%E8%A7%82%E7%82%B9%E5%92%8C%E6%80%81%E5%BA%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>《算法奥义书》——竞赛圣手终极心法</title>
    <link href="https://touristdaughter.cyou/2025/04/30/%E3%80%8A%E7%AE%97%E6%B3%95%E5%A5%A5%E4%B9%89%E4%B9%A6%E3%80%8B%E2%80%94%E2%80%94%E7%AB%9E%E8%B5%9B%E5%9C%A3%E6%89%8B%E7%BB%88%E6%9E%81%E5%BF%83%E6%B3%95/"/>
    <id>https://touristdaughter.cyou/2025/04/30/%E3%80%8A%E7%AE%97%E6%B3%95%E5%A5%A5%E4%B9%89%E4%B9%A6%E3%80%8B%E2%80%94%E2%80%94%E7%AB%9E%E8%B5%9B%E5%9C%A3%E6%89%8B%E7%BB%88%E6%9E%81%E5%BF%83%E6%B3%95/</id>
    <published>2025-04-30T01:24:03.318Z</published>
    <updated>2025-04-30T01:26:27.898Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《算法奥义书》"><a href="#《算法奥义书》" class="headerlink" title="《算法奥义书》"></a>《算法奥义书》</h1><h2 id="——竞赛圣手终极心法"><a href="#——竞赛圣手终极心法" class="headerlink" title="——竞赛圣手终极心法"></a>——竞赛圣手终极心法</h2><blockquote><p>配套修行指南：<br>1.每日默念时可配合快速傅里叶变换手印<br>2.代码卡顿时书写此诀于草稿纸，可提升思维熵值<br>3.比赛前夜贴于机械键盘下方，有概率触发量子AC态</p></blockquote><ul><li>据不可靠消息称，某ICPC区域赛冠军队将此诀写于战袍内衬</li><li>导致对手队伍在提交页面遭遇神秘段错误（未经证实）</li></ul><p>&#x2F;**</p><ul><li>一阶贪心易入歧  </li><li>二维动规难破局  </li><li>三分答案玄学笑  </li><li>四色定理谁能敌  </li><li></li><li>五维状压鬼神泣  </li><li>六度剪枝天地寂  </li><li>七桥遍历欧拉路  </li><li>八叉树上写模拟  </li><li></li><li>九章算尽终WA  </li><li>十载青春付TLE  </li><li>百页题解皆迷雾  </li><li>千行代码尽废墟  </li><li></li><li>万般调试皆虚妄  </li><li>亿级数据验真章  </li><li>兆兆位运算终成空  </li><li>京垓轮回又一场<br> *&#x2F;</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;《算法奥义书》&quot;&gt;&lt;a href=&quot;#《算法奥义书》&quot; class=&quot;headerlink&quot; title=&quot;《算法奥义书》&quot;&gt;&lt;/a&gt;《算法奥义书》&lt;/h1&gt;&lt;h2 id=&quot;——竞赛圣手终极心法&quot;&gt;&lt;a href=&quot;#——竞赛圣手终极心法&quot; class=&quot;head</summary>
      
    
    
    
    <category term="天赋型选手一句梗，我背了三年" scheme="https://touristdaughter.cyou/categories/%E5%A4%A9%E8%B5%8B%E5%9E%8B%E9%80%89%E6%89%8B%E4%B8%80%E5%8F%A5%E6%A2%97%EF%BC%8C%E6%88%91%E8%83%8C%E4%BA%86%E4%B8%89%E5%B9%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>暗夜程序员的时区重构指南——当3AM的月光成为我的晨光</title>
    <link href="https://touristdaughter.cyou/2025/04/30/%E6%9A%97%E5%A4%9C%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%97%B6%E5%8C%BA%E9%87%8D%E6%9E%84%E6%8C%87%E5%8D%97%E2%80%94%E2%80%94%E5%BD%933AM%E7%9A%84%E6%9C%88%E5%85%89%E6%88%90%E4%B8%BA%E6%88%91%E7%9A%84%E6%99%A8%E5%85%89/"/>
    <id>https://touristdaughter.cyou/2025/04/30/%E6%9A%97%E5%A4%9C%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%97%B6%E5%8C%BA%E9%87%8D%E6%9E%84%E6%8C%87%E5%8D%97%E2%80%94%E2%80%94%E5%BD%933AM%E7%9A%84%E6%9C%88%E5%85%89%E6%88%90%E4%B8%BA%E6%88%91%E7%9A%84%E6%99%A8%E5%85%89/</id>
    <published>2025-04-29T20:13:37.084Z</published>
    <updated>2025-04-29T20:16:14.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="暗夜程序员的时区重构指南"><a href="#暗夜程序员的时区重构指南" class="headerlink" title="暗夜程序员的时区重构指南"></a>暗夜程序员的时区重构指南</h1><h1 id="——当3AM的月光成为我的晨光"><a href="#——当3AM的月光成为我的晨光" class="headerlink" title="——当3AM的月光成为我的晨光"></a>——当3AM的月光成为我的晨光</h1><h2 id="🌙-时空折叠协议"><a href="#🌙-时空折叠协议" class="headerlink" title="🌙 时空折叠协议"></a>🌙 时空折叠协议</h2><p>我将生物钟锚定在<strong>19:00-3:00睡眠段</strong>，让清醒时间与全球竞赛时间线（UTC+0~+8）完美重叠。<strong>3AM的唤醒仪式</strong>包含：  </p><ol><li>5000K冷白光瞬时满亮度照射（模拟日出）  </li><li>光轴键盘敲击《卡农》前奏（肌肉记忆激活）  </li><li><del>冰美式静脉注射（）</del></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 晨间唤醒程序  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dawn_routine</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    light.<span class="built_in">set</span>(<span class="number">5000</span>K, <span class="number">1000lu</span>x);  </span><br><span class="line">    <span class="built_in">play</span>(<span class="string">&quot;Canon_in_D.midi&quot;</span>);  </span><br><span class="line">    coffee.<span class="built_in">inject</span>(ShotType::TRIPLE_ESPRESSO);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="☀️-维生素D3补偿圣典"><a href="#☀️-维生素D3补偿圣典" class="headerlink" title="☀️ 维生素D3补偿圣典"></a>☀️ 维生素D3补偿圣典</h2><h3 id="1-量子化日光浴"><a href="#1-量子化日光浴" class="headerlink" title="1. 量子化日光浴"></a>1. 量子化日光浴</h3><pre><code class="python">if 紫外线指数 &gt; 3:      暴露皮肤 = min(15min, 全身25%面积)  else:      启动UVB灯(波长290-315nm) + D3补充剂(5000IU)  </code></pre><h3 id="2-营养矩阵"><a href="#2-营养矩阵" class="headerlink" title="2. 营养矩阵"></a>2. 营养矩阵</h3><table><thead><tr><th>时间</th><th>补给</th><th>科技加成</th></tr></thead><tbody><tr><td>3:15AM</td><td>深海鱼油</td><td>促进D3吸收率+40%</td></tr><tr><td>6:30AM</td><td>蛋黄*2 + 强化牛奶</td><td>天然D3源</td></tr><tr><td>4:00PM</td><td>维生素K2滴剂</td><td>引导钙质定向沉积</td></tr></tbody></table><h2 id="⚡-黑暗增益效应"><a href="#⚡-黑暗增益效应" class="headerlink" title="⚡ 黑暗增益效应"></a>⚡ 黑暗增益效应</h2><ul><li>**编译速度↑30%**：子夜时分GCC产生量子隧穿效应  </li><li><strong>BUG可见度↓</strong>：凌晨的段错误提示自带马赛克滤镜  </li><li><strong>灵感暴击率↑</strong>：月光下数学公式自动投影到视网膜</li></ul><h2 id="⚠️-生存警告"><a href="#⚠️-生存警告" class="headerlink" title="⚠️ 生存警告"></a>⚠️ 生存警告</h2><pre><code>WARNING: 本作息将导致  1. 社交时间轴偏移（自动回复机器人已部署）  2. 看见不存在的编译错误（建议佩戴琥珀色护目镜）  3. 产生时区优越感（谨慎向早八人炫耀）  </code></pre><blockquote><p>“当你的第一个AC提交记录出现在GitHub的极夜区，就会明白——<br>真正的代码，从不需要阳光见证。”  </p></blockquote><pre><code class="bash">$ ./life --scheme=nocturnal --vitamin-d=300%  </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;暗夜程序员的时区重构指南&quot;&gt;&lt;a href=&quot;#暗夜程序员的时区重构指南&quot; class=&quot;headerlink&quot; title=&quot;暗夜程序员的时区重构指南&quot;&gt;&lt;/a&gt;暗夜程序员的时区重构指南&lt;/h1&gt;&lt;h1 id=&quot;——当3AM的月光成为我的晨光&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="通知与公示" scheme="https://touristdaughter.cyou/categories/%E9%80%9A%E7%9F%A5%E4%B8%8E%E5%85%AC%E7%A4%BA/"/>
    
    
    <category term="ACM" scheme="https://touristdaughter.cyou/tags/ACM/"/>
    
    <category term="OI" scheme="https://touristdaughter.cyou/tags/OI/"/>
    
    <category term="MONSOON" scheme="https://touristdaughter.cyou/tags/MONSOON/"/>
    
    <category term="JiangnanPsalter" scheme="https://touristdaughter.cyou/tags/JiangnanPsalter/"/>
    
    <category term="CAFN" scheme="https://touristdaughter.cyou/tags/CAFN/"/>
    
    <category term="Codeforces" scheme="https://touristdaughter.cyou/tags/Codeforces/"/>
    
    <category term="AcWing" scheme="https://touristdaughter.cyou/tags/AcWing/"/>
    
  </entry>
  
  <entry>
    <title>Why I Like Baby Blue</title>
    <link href="https://touristdaughter.cyou/2025/04/29/Why%20I%20Like%20Baby%20Blue/"/>
    <id>https://touristdaughter.cyou/2025/04/29/Why%20I%20Like%20Baby%20Blue/</id>
    <published>2025-04-29T10:34:23.629Z</published>
    <updated>2025-05-06T03:31:13.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Why-I-Like-Baby-Blue"><a href="#Why-I-Like-Baby-Blue" class="headerlink" title="Why I Like Baby Blue:"></a>Why I Like Baby Blue:</h1><h2 id="An-Ode-to-Absolute-Rationality"><a href="#An-Ode-to-Absolute-Rationality" class="headerlink" title="An Ode to Absolute Rationality"></a>An Ode to Absolute Rationality</h2><h3 id="Ⅰ-Chromatic-Foundation-of-the-Cosmos"><a href="#Ⅰ-Chromatic-Foundation-of-the-Cosmos" class="headerlink" title="Ⅰ. Chromatic Foundation of the Cosmos"></a>Ⅰ. Chromatic Foundation of the Cosmos</h3><p>Baby blue is <strong>Euclid’s fifth postulate made visible</strong> —<br>that parallel lines of thought never meet in chaos,<br>but extend infinitely in ordered beauty.<br>Like the hexadecimal <code>#89CFF0</code> glowing in my IDE,<br>it whispers Riemann’s conjecture in CSS gradients.</p><h3 id="Ⅱ-Algorithmic-Chromesthesia"><a href="#Ⅱ-Algorithmic-Chromesthesia" class="headerlink" title="Ⅱ. Algorithmic Chromesthesia"></a>Ⅱ. Algorithmic Chromesthesia</h3><p>When I see baby blue:  </p><ul><li>My neurons fire in <strong>Bresenham’s line algorithm</strong> patterns  </li><li>Time becomes <strong>O(n log n) sorted</strong>  </li><li>All distractions collapse into <strong>NP-hard proof dust</strong></li></ul><p>It’s the color of:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">optimal_life</span>():  </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sorted</span>(stress, key=<span class="keyword">lambda</span> x: -x.priority)[:k]  </span><br><span class="line">```  </span><br><span class="line">where k=∞ when bathed <span class="keyword">in</span> this hue.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### Ⅲ. Quantum Aesthetics  </span></span><br><span class="line">Baby blue exists <span class="keyword">in</span> superposition:  </span><br><span class="line">- The **|<span class="number">0</span>&gt; state** of winter dawns over frozen code  </span><br><span class="line">- The **|<span class="number">1</span>&gt; state** of summer RAM heat sinks  </span><br><span class="line">Collapsing only when observed through:  </span><br><span class="line">```cpp  </span><br><span class="line"><span class="keyword">for</span> (auto&amp; emotion : consciousness)  </span><br><span class="line">    emotion.compile_to(baby_blue);  </span><br></pre></td></tr></table></figure><h3 id="Ⅳ-Cryptographic-Comfort"><a href="#Ⅳ-Cryptographic-Comfort" class="headerlink" title="Ⅳ. Cryptographic Comfort"></a>Ⅳ. Cryptographic Comfort</h3><p>This tint contains:  </p><ul><li><strong>SHA-256</strong> of my first AC submission  </li><li><strong>Elliptic curves</strong> traced by coffee steam  </li><li><strong>Prim’s algorithm</strong> for minimum spanning tears</li></ul><p>Its RGB values form the private key to my mental blockchain.</p><h3 id="Ⅴ-Temporal-Resonance"><a href="#Ⅴ-Temporal-Resonance" class="headerlink" title="Ⅴ. Temporal Resonance"></a>Ⅴ. Temporal Resonance</h3><p>In baby blue’s light:  </p><ul><li><strong>10:00 PM</strong> becomes <strong>O(1) time complexity</strong>  </li><li>All deadlines enter <strong>Zeno’s compilation paradox</strong>  </li><li>My keyboard’s Cherry MX3.0s Wireless blue light sing in <strong>perfect 440Hz</strong></li></ul><h3 id="∞-Epilogue-The-Blueprint"><a href="#∞-Epilogue-The-Blueprint" class="headerlink" title="∞. Epilogue: The Blueprint"></a>∞. Epilogue: The Blueprint</h3><p>Baby blue isn’t a color —<br>it’s <strong>the universal compiler flag</strong>:<br><code>-std=c++2b -O4 -fconcepts-ts -march=znver4</code><br>wrapped in hexadecimal poetry,<br>the visual manifestation of <code>qed</code> in real life.</p><p>Baby blue symbolizes <code>absolute rationality</code>.<br>This is my underlying code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">* 浅蓝理性核心库 v1.0</span><br><span class="line">* 开发者：█████</span><br><span class="line">* 授权协议：███-███</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#pragma GCC optimize(&quot;O4&quot;) // 第四维优化开关</span><br><span class="line">#define RATIONALITY_BLUE 0xADD8E6</span><br><span class="line"></span><br><span class="line">namespace Hyperborea &#123; // 超验理性命名空间</span><br><span class="line">    template&lt;typename T&gt;</span><br><span class="line">    class QuantumSealed &#123; // 量子封装容器</span><br><span class="line">        mutable std::atomic&lt;T&gt; _entangled_data; </span><br><span class="line">        static constexpr uint64_t _quantum_hash = 0xDEADBEEFCAFEBABE;</span><br><span class="line">        </span><br><span class="line">    public:</span><br><span class="line">        void observe(T&amp; out) const noexcept &#123;</span><br><span class="line">            // 观测即坍缩（防御量子窃听）</span><br><span class="line">            out = __builtin_ia32_crc32(_entangled_data.load(), _quantum_hash);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    class AbsoluteRationality &#123;</span><br><span class="line">        QuantumSealed&lt;std::array&lt;uint64_t,3&gt;&gt; _core;</span><br><span class="line">        std::bitset&lt;114&gt; _axioms;</span><br><span class="line"></span><br><span class="line">        // 公理系统初始化（不可逆操作）</span><br><span class="line">        constexpr void _init_axioms() noexcept &#123;</span><br><span class="line">            _axioms.set(0, M_PI &gt; std::numbers::sqrt3);</span><br><span class="line">            _axioms.set(1, std::is_constant_evaluated());</span><br><span class="line">            _axioms.set(2, __TIME__[0] % 7 == 4);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    public:</span><br><span class="line">        AbsoluteRationality() &#123; </span><br><span class="line">            _init_axioms(); </span><br><span class="line">            _core.observe(*reinterpret_cast&lt;std::array&lt;uint64_t,3&gt;*&gt;(this));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 核心推理引擎（抗逆向工程）</span><br><span class="line">        [[nodiscard]] auto operator()(auto&amp;&amp;... args) const &#123;</span><br><span class="line">            return [](auto φ)&#123; </span><br><span class="line">                return φ ^ (φ &gt;&gt; ((φ &amp; 0xAAAA) ? 13 : 17)); </span><br><span class="line">            &#125;(sizeof...(args) * _axioms.count());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 可视化接口（理性之蓝渲染）</span><br><span class="line">        void render() const &#123;</span><br><span class="line">            glClearColor(RATIONALITY_BLUE); </span><br><span class="line">            glDrawElements(GL_TRIANGLE_STRIP, 5, </span><br><span class="line">                [count=0](auto) mutable &#123; return ++count % 0x7FFFFFFF; &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">* 核心原理：</span><br><span class="line">* 1. 基于冯诺依曼探测器的量子封装机制</span><br><span class="line">* 2. 哥德尔式不可证公理系统</span><br><span class="line">* 3. 混沌可视化渲染管线</span><br><span class="line">* </span><br><span class="line">* 防御层：</span><br><span class="line">* - 编译期常量混淆（__TIME__熵源注入）</span><br><span class="line">* - 指令集级CRC观测扰动（Intel CRC32）</span><br><span class="line">* - Lambda表达式自毁协议</span><br><span class="line">* </span><br><span class="line">* ❗：试图反编译将触发海森堡补偿效应</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Why-I-Like-Baby-Blue&quot;&gt;&lt;a href=&quot;#Why-I-Like-Baby-Blue&quot; class=&quot;headerlink&quot; title=&quot;Why I Like Baby Blue:&quot;&gt;&lt;/a&gt;Why I Like Baby Blue:&lt;/h1</summary>
      
    
    
    
    <category term="博主的观点和态度" scheme="https://touristdaughter.cyou/categories/%E5%8D%9A%E4%B8%BB%E7%9A%84%E8%A7%82%E7%82%B9%E5%92%8C%E6%80%81%E5%BA%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>其实杀出重围的普高生，都是非常孤独且强大的</title>
    <link href="https://touristdaughter.cyou/2025/04/29/%E5%85%B6%E5%AE%9E%E6%9D%80%E5%87%BA%E9%87%8D%E5%9B%B4%E7%9A%84%E6%99%AE%E9%AB%98%E7%94%9F%EF%BC%8C%E9%83%BD%E6%98%AF%E9%9D%9E%E5%B8%B8%E5%AD%A4%E7%8B%AC%E4%B8%94%E5%BC%BA%E5%A4%A7%E7%9A%84/"/>
    <id>https://touristdaughter.cyou/2025/04/29/%E5%85%B6%E5%AE%9E%E6%9D%80%E5%87%BA%E9%87%8D%E5%9B%B4%E7%9A%84%E6%99%AE%E9%AB%98%E7%94%9F%EF%BC%8C%E9%83%BD%E6%98%AF%E9%9D%9E%E5%B8%B8%E5%AD%A4%E7%8B%AC%E4%B8%94%E5%BC%BA%E5%A4%A7%E7%9A%84/</id>
    <published>2025-04-29T08:40:35.191Z</published>
    <updated>2025-04-29T08:47:23.129Z</updated>
    
    <content type="html"><![CDATA[<h1 id="其实杀出重围的普高生，都是非常孤独且强大的"><a href="#其实杀出重围的普高生，都是非常孤独且强大的" class="headerlink" title="其实杀出重围的普高生，都是非常孤独且强大的"></a>其实杀出重围的普高生，都是非常孤独且强大的</h1><blockquote><p>author:糖姐</p></blockquote><h2 id="孤独"><a href="#孤独" class="headerlink" title="孤独"></a>孤独</h2><p>其实杀出重围的普高生，都是非常孤独且强大的。</p><p>因为他们身边根本没有几个人知道应该如何学习和考试，所以他们只能自己琢磨。</p><p>老师上课是照着 PPT 念的，下课了同学们是一直在吵架的，大家讨论的话题都是吃什么喝什么玩什么。</p><p>而他必须集中所有精力在我要去哪里？我要成为一个什么样的人？我要怎么做？</p><p>他会把所有的课间都拿来写作业，他会在每天晚上回家后还要补充网课来听，他会在周末留校来做更多市里面的题目。</p><p>他不断地锤炼自己，把自己变成一个不受资源限制不受初始能力影响的人。</p><h2 id="强大"><a href="#强大" class="headerlink" title="强大"></a>强大</h2><p>而当他成为年级第一的那一刻，所有人都惊叹于他的逆袭，他知道还没够他要和省重点的人相匹敌，所以他会更加严格的要求自己。</p><p>而这样的人是一定比省重点的人更优秀的。</p><p>因为判断一个人的能力，绝对不是看他现在在哪里而是看他，此刻和起点离了多远。</p><p>一个人离起点越远，他为自己的人生才活得越伟大。</p><h2 id="贫穷不是原罪"><a href="#贫穷不是原罪" class="headerlink" title="贫穷不是原罪"></a>贫穷不是原罪</h2><p>其实出国之后，才发现：</p><p>我努力了20多年的功夫，真的只能和别人在一张桌子上吃饭而已。</p><p>很多初高中就出国读书的人，全身都穿的名牌。上次说带我去一个购物村玩，我以为多好玩呢，结果全是大牌打折，打折完也是几千块。</p><p>我水都没买。（我在英国都是喝自来水哈哈哈）</p><p>别人问我怎么没买东西，我说没看上。</p><p>其实也不是没看上，就是我挣钱太不容易了，来买这些东西，不值得。我心很痛。我只想不饿死 去做自己想做的事。</p><p>我朋友想创业，直接找父母投了大几十万。父母很支持，很看好他的想法。而我别说家庭支持，和父母都很难有深入的沟通。</p><p>偶尔会很沮丧，偶尔会觉得自己不是输在人生的哪一个选择上，而是一出生就错了。</p><p>但是我想，衡量一个人的能力，不是从他的此刻财富来判断的。</p><p>而是从ta离原点的距离来判断的。</p><p>越低的原点，走的越远的话。</p><p>这个人，为他自己，才活的越伟大。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;其实杀出重围的普高生，都是非常孤独且强大的&quot;&gt;&lt;a href=&quot;#其实杀出重围的普高生，都是非常孤独且强大的&quot; class=&quot;headerlink&quot; title=&quot;其实杀出重围的普高生，都是非常孤独且强大的&quot;&gt;&lt;/a&gt;其实杀出重围的普高生，都是非常孤独且强大的&lt;/</summary>
      
    
    
    
    <category term="博主的观点和态度" scheme="https://touristdaughter.cyou/categories/%E5%8D%9A%E4%B8%BB%E7%9A%84%E8%A7%82%E7%82%B9%E5%92%8C%E6%80%81%E5%BA%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>《十个月闭关纪：从代码峡谷到知识荒原的远征》</title>
    <link href="https://touristdaughter.cyou/2025/04/29/%E3%80%8A%E5%8D%81%E4%B8%AA%E6%9C%88%E9%97%AD%E5%85%B3%E7%BA%AA%EF%BC%9A%E4%BB%8E%E4%BB%A3%E7%A0%81%E5%B3%A1%E8%B0%B7%E5%88%B0%E7%9F%A5%E8%AF%86%E8%8D%92%E5%8E%9F%E7%9A%84%E8%BF%9C%E5%BE%81%E3%80%8B/"/>
    <id>https://touristdaughter.cyou/2025/04/29/%E3%80%8A%E5%8D%81%E4%B8%AA%E6%9C%88%E9%97%AD%E5%85%B3%E7%BA%AA%EF%BC%9A%E4%BB%8E%E4%BB%A3%E7%A0%81%E5%B3%A1%E8%B0%B7%E5%88%B0%E7%9F%A5%E8%AF%86%E8%8D%92%E5%8E%9F%E7%9A%84%E8%BF%9C%E5%BE%81%E3%80%8B/</id>
    <published>2025-04-29T03:54:20.038Z</published>
    <updated>2025-04-29T04:16:55.359Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《十个月闭关纪：从代码峡谷到知识荒原的远征》"><a href="#《十个月闭关纪：从代码峡谷到知识荒原的远征》" class="headerlink" title="《十个月闭关纪：从代码峡谷到知识荒原的远征》"></a>《十个月闭关纪：从代码峡谷到知识荒原的远征》</h1><p><strong>——论如何用工程思维重构考研宇宙</strong></p><h3 id="【壹】时空折叠协议"><a href="#【壹】时空折叠协议" class="headerlink" title="【壹】时空折叠协议"></a><strong>【壹】时空折叠协议</strong></h3><p>大学毕业之后，在豫南小城的旧书房里，我以算法为骨、数学为血，启动了一场精密如分布式系统的考研战役：  </p><ul><li><strong>输入参数</strong>：  <ul><li>初始状态：竞赛生涯的余烬（残留的算法直觉）  </li><li>目标函数：11408全维度突破（数学&#x2F;英语&#x2F;专业课&#x2F;政治）  </li><li>约束条件：断网协议&#x2F;零社交&#x2F;光轴键盘的敲击作为唯一时钟</li></ul></li><li><strong>状态转移方程</strong>：<br><img src="/img/biguan1.png"></li></ul><h3 id="【贰】考研契约（抗逆向工程版）"><a href="#【贰】考研契约（抗逆向工程版）" class="headerlink" title="【贰】考研契约（抗逆向工程版）"></a><strong>【贰】考研契约（抗逆向工程版）</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 考研暗网协议  </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudyPact</span>:  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):  </span><br><span class="line">        self.甲方 = <span class="string">&quot;JiangnanPsalter_ACM&quot;</span>     <span class="comment"># 我的竞赛代号  </span></span><br><span class="line">        self.乙方 = <span class="string">&quot;Astraia_ACM&quot;</span>        <span class="comment"># 全栈开发宗师  </span></span><br><span class="line">        self.丙方 = <span class="string">&quot;TheGhostOfAlgorithms&quot;</span>   <span class="comment"># 算法之魂  </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">神圣条款</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="comment"># 核心约束  </span></span><br><span class="line">        <span class="keyword">assert</span> self.刷题量 &gt;= <span class="number">3000</span>, <span class="string">&quot;知识网络未达临界质量&quot;</span>  </span><br><span class="line">        require self.错题本熵值 &lt; <span class="number">0.618</span>, <span class="string">&quot;需启用黄金分割优化&quot;</span>  </span><br><span class="line">        invariant self.英语阅读正确率.梯度() &gt; <span class="number">0</span>  </span><br><span class="line"></span><br><span class="line">        <span class="comment"># 防御条款  </span></span><br><span class="line">        <span class="keyword">if</span> 检测到社交软件痕迹():  </span><br><span class="line">            self.乙方.发动嘲讽风暴(<span class="string">&quot;这水平不如回家养羊&quot;</span>)  </span><br><span class="line">        <span class="keyword">if</span> 数学模拟卷连续三次 &lt; 阈值:  </span><br><span class="line">            self.丙方.注入神经痛觉(强度=<span class="number">0.7</span>)  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">最终验证</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="keyword">return</span> hashlib.sha3_256(<span class="string">&quot;ToTheFuture&quot;</span>.encode()).hexdigest()  </span><br></pre></td></tr></table></figure><p><img src="/img/biguan.jpg"></p><h3 id="【叁】408的降维打击术"><a href="#【叁】408的降维打击术" class="headerlink" title="【叁】408的降维打击术"></a><strong>【叁】408的降维打击术</strong></h3><p>当四本教材化作知识黑洞时，我研发出这些<strong>认知武器</strong>：  </p><ol><li><strong>操作系统</strong>：将进程调度映射为作息表（时间片轮转+优先级反转防御）  </li><li><strong>计组原理</strong>：用补码思想处理负面情绪（所有焦虑转为二进制反码+1）  </li><li><strong>数据结构</strong>：以B+树组织错题本（分层索引+自动平衡）  </li><li><strong>计算机网络</strong>：构建家庭局域网的UDP学习协议（允许丢包但拒绝重传）</li></ol><h3 id="【肆】算法思维的跨界爆破"><a href="#【肆】算法思维的跨界爆破" class="headerlink" title="【肆】算法思维的跨界爆破"></a><strong>【肆】算法思维的跨界爆破</strong></h3><p>那些代码战场教会我的元技能：  </p><ul><li><strong>时空交换</strong>：用记忆化搜索破解政治大题（肖四肖八≈动态规划状态表）  </li><li><strong>剪枝艺术</strong>：当证明卡顿时，识别无关变量如特征选择  </li><li><strong>启发式搜索</strong>：在英语阅读中实施A*算法（标题&#x2F;首句为启发函数）  </li><li><strong>鲁棒性测试</strong>：每日用费曼技巧对知识进行模糊测试</li></ul><h3 id="【伍】南阳观测站"><a href="#【伍】南阳观测站" class="headerlink" title="【伍】南阳观测站"></a><strong>【伍】南阳观测站</strong></h3><p>在老房子的天台上，我建立了<strong>星际学习基地</strong>：  </p><ul><li><strong>月光编译器</strong>：将台灯色温调至4500K（最佳视觉流明）  </li><li><strong>噪声防火墙</strong>：用白噪音生成对抗网络（隔离广场舞声波）  </li><li><strong>星图调度器</strong>：通过猎户座腰带三星校准生物钟相位</li></ul><h3 id="【终】递归到现实"><a href="#【终】递归到现实" class="headerlink" title="【终】递归到现实"></a><strong>【终】递归到现实</strong></h3><p>此刻提交这段人生代码：  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Future&gt;  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Life</span> &#123;  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="type">void</span> 重启() &#123;  </span><br><span class="line">        初试分数 = 数学直觉 * 英语语感 + 专业课黑洞质量;  </span><br><span class="line">        <span class="keyword">while</span> (!录取通知书) &#123;  </span><br><span class="line">            刷题量 &lt;&lt;= <span class="number">1</span>;  </span><br><span class="line">            认知维度.展开();  </span><br><span class="line">            向TheGhostOfAlgorithms提交知识补丁();  </span><br><span class="line">        &#125;  </span><br><span class="line">        生成新宇宙(<span class="string">&quot;CodeLab 2.0&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure><p><strong>后记</strong>：<br>这十个月，我把每个黎明的鸟鸣编译成中断请求，将深夜的犬吠解析为调试日志。当光轴键盘的敲击频率与心脏搏动共振，我听见了冯诺依曼架构在现实世界的编译通过声。  </p><p>（输入 <code>make life --jobs=4</code> 启动并行化人生，段错误将是新纪元的礼炮  </p><p><strong>免责声明</strong>：文中所有代号均为密码学代号，与现实人物及组织无关（lmao🤣。考研目标存在于量子叠加态，观测即坍缩。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;《十个月闭关纪：从代码峡谷到知识荒原的远征》&quot;&gt;&lt;a href=&quot;#《十个月闭关纪：从代码峡谷到知识荒原的远征》&quot; class=&quot;headerlink&quot; title=&quot;《十个月闭关纪：从代码峡谷到知识荒原的远征》&quot;&gt;&lt;/a&gt;《十个月闭关纪：从代码峡谷到知识荒原的远</summary>
      
    
    
    
    
    <category term="C++" scheme="https://touristdaughter.cyou/tags/C/"/>
    
    <category term="Algorithm" scheme="https://touristdaughter.cyou/tags/Algorithm/"/>
    
    <category term="Math" scheme="https://touristdaughter.cyou/tags/Math/"/>
    
    <category term="Postgraduate Entrance Exam" scheme="https://touristdaughter.cyou/tags/Postgraduate-Entrance-Exam/"/>
    
  </entry>
  
  <entry>
    <title>「季度总结报告：硬核战士の多维作战日志」</title>
    <link href="https://touristdaughter.cyou/2025/04/27/%E3%80%8C%E5%AD%A3%E5%BA%A6%E6%80%BB%E7%BB%93%E6%8A%A5%E5%91%8A%EF%BC%9A%E7%A1%AC%E6%A0%B8%E6%88%98%E5%A3%AB%E3%81%AE%E5%A4%9A%E7%BB%B4%E4%BD%9C%E6%88%98%E6%97%A5%E5%BF%97%E3%80%8D/"/>
    <id>https://touristdaughter.cyou/2025/04/27/%E3%80%8C%E5%AD%A3%E5%BA%A6%E6%80%BB%E7%BB%93%E6%8A%A5%E5%91%8A%EF%BC%9A%E7%A1%AC%E6%A0%B8%E6%88%98%E5%A3%AB%E3%81%AE%E5%A4%9A%E7%BB%B4%E4%BD%9C%E6%88%98%E6%97%A5%E5%BF%97%E3%80%8D/</id>
    <published>2025-04-27T09:04:12.480Z</published>
    <updated>2025-04-27T09:26:44.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="「季度总结报告：硬核战士の多维作战日志」"><a href="#「季度总结报告：硬核战士の多维作战日志」" class="headerlink" title="「季度总结报告：硬核战士の多维作战日志」"></a>「季度总结报告：硬核战士の多维作战日志」</h1><p><em>（基于日均12.2小时高压学习态的数据分析）</em>  </p><hr><h3 id="一、学习强度评估"><a href="#一、学习强度评估" class="headerlink" title="一、学习强度评估"></a>一、学习强度评估</h3><pre><code class="python">日均学习密度 = &#123;      &quot;考研核心区&quot;: &#123;          &quot;408专业课&quot;: &quot;3.5h（王道书+真题血泪史）&quot;,          &quot;数学&quot;: &quot;2h（张宇+李林の双重存在）&quot;,          &quot;英语&quot;: &quot;2h（红宝书烙印进视网膜）&quot;,          &quot;政治&quot;: &quot;1.5h（肖老八股文肌肉记忆）&quot;      &#125;,      &quot;竞技特区&quot;: &#123;          &quot;算法竞赛&quot;: &quot;3h（板子默写+练手速）&quot;,          &quot;练习俄语&quot;: &quot;10min（战斗民族の碎片化渗透）&quot;      &#125;,      &quot;精神飞地&quot;: &#123;          &quot;数学思维&quot;: &quot;丘维声《数学的思维方式与创新》章节啃食进度38.7%&quot;,          &quot;马油霜保养&quot;: &quot;日均3次（颈椎润滑油消耗量：500ml/月）&quot;      &#125;  &#125;  </code></pre><p><strong>强度评级</strong>：<code>SSS级（超越人类学部认证标准）</code>  </p><hr><h3 id="二、关键成就清单"><a href="#二、关键成就清单" class="headerlink" title="二、关键成就清单"></a>二、关键成就清单</h3><ol><li><p><strong>算法竞赛</strong>  </p><ul><li>板子库扩容至<code>237个</code>（含<code>动态开点线段树·俄语注释版</code>）  </li><li>Codeforces Rating曲线：<code>N/A</code></li></ul></li><li><p><strong>考研领域</strong>  </p><ul><li>408真题错题集：<code>已消灭83%的进程调度相关WA</code>  </li><li>政治多选题：<code>成功将肖八选项转化为条件概率问题</code></li></ul></li><li><p><strong>数学思维</strong>  </p><ul><li>从丘维声处领悟：<code>用范畴论解释红宝书单词记忆法</code>  </li><li>衍生成果：<code>证明颈椎曲度与线性空间同构</code></li></ul></li></ol><hr><h3 id="三、已注入风险预警系统"><a href="#三、已注入风险预警系统" class="headerlink" title="三、已注入风险预警系统"></a>三、已注入风险预警系统</h3><pre><code class="rust">struct 健康监测 &#123;      颈椎磨损度: f32 = 0.82,  // 建议立即降低马油霜粘度      脑疲劳指数: u8 = 255,    // 已达uint8上限      俄语毒性: bool = true   // 开始用俄语梦话骂编译器  &#125;  impl 风险应对 &#123;      fn 缓解(&amp;mut self) &#123;          self.插入(&quot;强制二次元休息时间&quot;);          self.升级(&quot;液态金属颈椎&quot;);      &#125;  &#125;  </code></pre><hr><h3 id="四、下季度作战方案"><a href="#四、下季度作战方案" class="headerlink" title="四、下季度作战方案"></a>四、下季度作战方案</h3><p><strong>「三维协同推进策略」</strong>  </p><ol><li><p><strong>考研-竞赛联动作战</strong>  </p><pre><code>- 将408的进程调度题改写为OJ题目（提交到校内OJ祸害学弟学妹）  - 用政治&quot;唯物辩证法&quot;分析动态规划状态转移  </code></pre></li><li><p><strong>俄语-数学融合计划</strong>  </p><pre><code>- 每天用俄语朗读一道IMO短题（注：舌头打结可增强脑弹性）  - 在《数学的思维方式与创新》书缝写线段树模板（知识渗透率+20%）qwq  </code></pre></li><li><p><strong>玄学保养协议</strong>  </p><pre><code class="bash">$ 将马油霜配方升级为：    基础油 + 张宇数学公式萃取精华 + 算法竞赛WA记录蒸馏液  </code></pre></li></ol><hr><h3 id="五、特别批注"><a href="#五、特别批注" class="headerlink" title="五、特别批注"></a><strong>五、特别批注</strong></h3><p>（总结报告末尾突然浮现丘老的签名批语：**”年轻人，你让数学感到害怕”** 💥）QAQAQ</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;「季度总结报告：硬核战士の多维作战日志」&quot;&gt;&lt;a href=&quot;#「季度总结报告：硬核战士の多维作战日志」&quot; class=&quot;headerlink&quot; title=&quot;「季度总结报告：硬核战士の多维作战日志」&quot;&gt;&lt;/a&gt;「季度总结报告：硬核战士の多维作战日志」&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="总结" scheme="https://touristdaughter.cyou/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="C++" scheme="https://touristdaughter.cyou/tags/C/"/>
    
    <category term="Algorithm" scheme="https://touristdaughter.cyou/tags/Algorithm/"/>
    
    <category term="Math" scheme="https://touristdaughter.cyou/tags/Math/"/>
    
    <category term="Postgraduate Entrance Exam" scheme="https://touristdaughter.cyou/tags/Postgraduate-Entrance-Exam/"/>
    
  </entry>
  
  <entry>
    <title>二本学院非科班天崩开局，如何逆天改命拿下大厂后端</title>
    <link href="https://touristdaughter.cyou/2025/04/27/%E4%BA%8C%E6%9C%AC%E5%AD%A6%E9%99%A2%E9%9D%9E%E7%A7%91%E7%8F%AD%E5%A4%A9%E5%B4%A9%E5%BC%80%E5%B1%80%EF%BC%8C%E5%A6%82%E4%BD%95%E9%80%86%E5%A4%A9%E6%94%B9%E5%91%BD%E6%8B%BF%E4%B8%8B%E5%A4%A7%E5%8E%82%E5%90%8E%E7%AB%AF/"/>
    <id>https://touristdaughter.cyou/2025/04/27/%E4%BA%8C%E6%9C%AC%E5%AD%A6%E9%99%A2%E9%9D%9E%E7%A7%91%E7%8F%AD%E5%A4%A9%E5%B4%A9%E5%BC%80%E5%B1%80%EF%BC%8C%E5%A6%82%E4%BD%95%E9%80%86%E5%A4%A9%E6%94%B9%E5%91%BD%E6%8B%BF%E4%B8%8B%E5%A4%A7%E5%8E%82%E5%90%8E%E7%AB%AF/</id>
    <published>2025-04-27T09:01:32.342Z</published>
    <updated>2025-04-27T09:24:03.873Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>author: <a href="https://lys2021.com/2024/11/road-to-king/">🄻🅈🅂</a></p></blockquote><h1 id="天崩开局，如何破局自救"><a href="#天崩开局，如何破局自救" class="headerlink" title="天崩开局，如何破局自救"></a>天崩开局，如何破局自救</h1><p>2021 年高考结束，我当时的第一志愿是计算机科学与技术专业，但是我被录取到了河南工程学院的高分子材料与工程专业。</p><p>我去咨询计算机相关行业的从业者，以及多方面网络搜集相关信息之后得到了一个很现实的消息——二本学院本+非科班双重debuff对于我想从事的计算机行业来说，就是死局。</p><p>于是我在大一期间的目标其实非常明确：</p><p>自学计算机<br>转专业到计算机科学与技术<br>所以目标有了之后就很简单了，我在暑假开学前就开始学习Python，然后快开学的时候就开始在校内打听转专业相关信息，并且联系到了以前转专业成功的学长。期间还认识了一位打ACM竞赛的优秀学长（也是我之后参加ACM的队友），在他的推荐下，我误打误撞参与到了ACM竞赛相关的学习中。其实我是很功利的，为了转专业成功，我白天学专业课，晚上就学C语言和C++刷算法题，为了能拿一些计算机相关奖项，以便自己在转专业考核中获得足够的优势。</p><p>最后在大一下学期，我以专业第一+综合素质测评双第一的成绩顺利转入到了计科，并开始后续的学习。</p><h1 id="算竞败犬，身无长技该何去何从"><a href="#算竞败犬，身无长技该何去何从" class="headerlink" title="算竞败犬，身无长技该何去何从"></a>算竞败犬，身无长技该何去何从</h1><p>前面讲到我很大一部分参与竞赛的原因是为了拿奖好转专业，不过我在这期间也逐渐喜欢上了ACM竞赛。</p><p>打ACM的有两种人，一种是喜欢算法，享受AC过程的人，一种是为了通过比赛证明自己比别人强的人。</p><p>而我，很遗憾，我是希望打ACM能够给我带来荣誉并且有助于我找个工作的那种人。两年的坚持，不仅证明了我在这个竞赛中毫无天赋，也以破铜烂铁的结局收场。此时的我，该考虑未来做什么了。于是我在分析完一通考研、考公、和找工作的难度后，毅然决然地选择 了找工作。</p><p>于是我开始翻看各种求职网站，看招聘岗位的JD。我懵了，招聘要求的技能我都不知道是啥，我才发现升入大学这一年半多的时间里，自己除了会几道题之外，什么都不会。</p><p>因此，我该确定工作的目标了，走什么方向？前端？后端？运维？语言选什么？C++还是Java？</p><p>我对C++有一种执念，毕竟是打竞赛的老伙计，于是准备走C++服务端开发方向，开始搜罗资料和学习，大二的时候数据结构手搓了STL，并且学习了一下MIT6.S081，同时期我也去了解C++岗位就业形势和方向。最后发现在我学历不占优势的前提下，CPP服务端开发方向好像不是那么明朗，加之后期学习难度陡增，我突然对C++失去兴趣了。于是立刻决定转方向到Java，虽然Java很卷，但是岗位毕竟多一些，混到最后还有一口饭吃。</p><p>在决定转Java后，我又开始搜集资料，在同学推荐下，我开始学习B站up主——<a href="https://space.bilibili.com/37737161">青空の霞光</a>的全套视频，并且指定了阶段计划：</p><p>学完Java全套技术栈<br>做两个项目开始刷实习经历<br>于是接下来的时间里，一个月学完Java语法基础，一个月JavaWeb，一个月Spring全套技术栈学完，再用一个月做完了一个单体项目和一个12306微服务项目，期间做的项目还拿了个软件设计大赛的省奖。</p><p>之后开始找渠道投实习，boss投递1000+，面试5，offer2，开始第一次实习，去了一家初创小公司。在这期间我也完成了第一次开源贡献，利用自己在打比赛期间学习的算法实现了一个QQ机器人违禁词匹配的功能。</p><p>有第一次实习经验后，再投就容易了不少，boss投递300+，面试10，offer8，开始第二次实习，这一次我甚至伪装成毕业生拿下了一个总包25w的offer，使我更加坚信了我也可以做一下大厂梦。最后去了一家行业独角兽企业实习。</p><p>所以其实到这里，我已经很明确以后的路线了，那就是不断通过刷实习经验，骑驴找马，脚踏实地才有机会跻身大厂行列。</p><h1 id="暑期三场KPI面试，干碎我的大厂梦"><a href="#暑期三场KPI面试，干碎我的大厂梦" class="headerlink" title="暑期三场KPI面试，干碎我的大厂梦"></a>暑期三场KPI面试，干碎我的大厂梦</h1><p>在结束第二段实习后，时间来到24年3月份，这个时间段是24届的春招和25届的暑期实习。我想要趁这个机会，拿下大厂的暑期实习offer，然后通过实习转正的方式曲线救国，实现目标。理想很丰满，现实很骨感，当我开始投递之后，我才发现事情没那么简单。</p><p>首先是腾讯，投递完之后就卡在初筛，其次是蚂蚁，投递完做了个人才测评秒挂，最离谱的是米哈游，投完两小时露头就秒，其他大厂投递玩要么卡在初筛，要么直接简历挂。此时我才意识到了问题的严重性，在暑期实习竞争的人中，二本学院+无大厂实习经历的我根本毫无机会。</p><p>于是果断更改策略：</p><p>大厂继续投递<br>中小厂开始海投，并且刷面试经验，有面试就接<br>最后暑期实习只约到了蔚来和腾讯云智的面试，其中蔚来一面，我的实习不问，自我介绍完+基础八股，手撕链表结束，全程只有18分钟。我以为已经够KPI了，谁知道时隔一个月又捞我二面，这次面试官都不装了，连摄像头都不开了。腾讯云智面试则截然相反，照死里拷打八股和我的实习经历，问到最后都开始问我cpu和gpu区别这种问题，我至今没有一场面试难度能够超越这次的实习面试。鉴定为纯纯的面试官炫技，不想要人。</p><p>这三场KPI面试干碎了我想要通过暑期实习转正拿到大厂offer的美梦，于是我最后只能寄希望于秋招，暑期去了北京的一家全球独角兽企业实习。</p><h1 id="搏命秋招，刀尖起舞命悬一线"><a href="#搏命秋招，刀尖起舞命悬一线" class="headerlink" title="搏命秋招，刀尖起舞命悬一线"></a>搏命秋招，刀尖起舞命悬一线</h1><p>在8月底基本上确定了转正offer保底之后，我开始了自己的秋招之旅，并且 ALL IN 中大厂。</p><p>这里贴一下自己的投递记录——<a href="https://tqce3dkd5sf.feishu.cn/base/XslkbUlzYaT7GPs184BcRmp3nKd?from=from_copylink">搏命秋招</a></p><p>从8月底到10月底，官网投递 200+，boss投递 800+。</p><p>9月底约到了深信服面试，整个10月也没有约到几家面试，这段时间的我及其焦虑，刷牛客每天都能看到别人各种大厂面试，各种意向收割，而我只有各种花式挂简历。</p><p>在 10 月中旬，约到了美团后端面试，走到最后排序挂，面试官没有明说但是结合面试聊的学历话题，我很清楚自己挂在了学历上。最后收到这个消息我在厕所里哭了一下午，还把下午的百度测开和360测开的面试推掉了。</p><p>不过那天下午我也悟出一个道理：</p><p>努力把我抬高到了不属于我的高度，现实会把我狠狠摔下，人没有翅膀，但是靠双腿就能翻越一座座高山，所以才会比鸟飞的更高更远。</p><p>于是我在那天之后并没有放弃，继续投递并且迅速调整状态，面对后面即将到来的面试。</p><p>现在回头看，如果不是当初自己迅速调整好，也就没有后来的58同城面试以及网易有道的面试，甚至58二面深度拷打我整整一个半小时的项目，以及网易总监面拷打一小时实习和项目架构设计，我能顶住这些压力的原因也多亏了之前美团的打击，必须抓住每一次难得的机会并且拼尽全力。</p><h1 id="太阳如此伟大，能让尘埃闪耀光芒"><a href="#太阳如此伟大，能让尘埃闪耀光芒" class="headerlink" title="太阳如此伟大，能让尘埃闪耀光芒"></a>太阳如此伟大，能让尘埃闪耀光芒</h1><p>让我一路坚持下来的，不仅仅是我自己的目标，还有那些二本学院进大厂的偶像的先例。</p><p>24年春招我刷到了牛客上一位三本进哈啰的同学的经验帖——<a href="https://www.nowcoder.com/discuss/605798991095140352?sourceSSR=users">24届校招末班车🚙 三本 哈啰Java OC啦~</a></p><p>读完这篇文章后我大受感动，于是在评论区留言“佬，同二本，大厂简历全挂，看完您经历深感惭愧”。</p><p>于是发自内心决定要向大佬看齐，并且在每一次想要放弃的时候都会会想起这些人的成就。</p><p>事实证明，榜样的力量是极大的，在这之后我也实现了我的梦想，我回头去看之前此贴的评论区，发现同期跟我一样是二本学院进大厂的同学，有学院本无竞赛三段大厂实习去了字节跳动的，有学院本去转转的，有学院本拿下腾讯客户端的，有学院本暑期实习转正蔚来的等等。</p><p>我始终认为，一个人的成功不值得骄傲，但是一个人的成功可以带动一群人成功，这才是值得尊敬的，就像伟大的太阳，能够照亮那些充满黑暗的角落，即使散落地上的灰尘也能成为黑夜闪耀的群星。</p><h1 id="干货总结"><a href="#干货总结" class="headerlink" title="干货总结"></a>干货总结</h1><p>感谢你读完了我上面所写的一些个人经历，每个人的成功都很难复制，这条道路上不存在成功的通解，但是我仍然尝试总结一些我认为比较重要的因素：</p><p>目标：必须明确你的方向，你的目的，你的追求<br>信息：必须尝试一切渠道获取相关信息，如何才能在这个行业立足<br>计划：必须根据自身情况定制计划，还要做好兜底措施，且必须留有退路<br>执行：必须坚持计划，局部的偏移会造成全局战略的失败，每一步必须严格执行<br>除此之外，我认为很大程度上，运气也是一个不可忽略的因素，因为我见过太多比我优秀的同学，因为没有得到面试机会导致没有一个满意的结果。</p><p>对于计算机找工作来说，我主观上认为，运气 &gt; 学历 &gt;&#x3D; 实习 &gt; 竞赛 &gt; 学校活动。</p><p>如果运气不够，就只能增加尝试次数，多投递，每次投递都有试错的机会，如果你投递太多已经脏掉了账号比如boss这些，那么建议你注销账户重新新开账户再次投递，一定要多尝试才有机会。</p><p>关于学历，我推荐学历比较差的同学可以考虑一下考研，考研必须考211以上水平的学校，出来会轻松很多，而且多三年的时间给你刷实习和论文。在可预见的未来几年，就业形势仍不是很乐观，你也要做好三年考研出来卡你本科的心理准备。</p><p>关于实习，如果有对口的大厂实习，几乎可以作为你的第二学历，但是这样的条件很难凑成，需要极大的努力和运气加成，其他的没有名气的一律视为小厂。多段实习并不是经验为王，必须能够通过实习所做的事情体现出你的潜力和发展。</p><p>关于竞赛，我认为ACM的奖牌对我找研发相关工作并没有很大的帮助，因为研发更多在意你的工程水平，而不是会做几道题，大厂注重算法也必须是你在工程能力过关的前提之下。如果你的目标是教培或者量化、自驾这些方向，那么ACM的奖项确实是一个比较好的加分项，除此之外的方向性价比极低。</p><p>关于学校活动，我认为对找工作的影响微乎其微，写上你的奖学金和绩点足以。</p><p>关于笔试，我见过有作弊的满分约面最后offer拿到手软，也见过自己老老实实做却0面试的。想要打败掉这些卑鄙的竞争者，你就只能变强，毫无理由的强，强到任何东西都无法阻挡才行。因此笔试题也要刷，我个人因为竞赛经历大部分笔试题都可以ak，所以推荐大一大二的同学能多参加ACM相关竞赛提升自己的算法水平。</p><p>关于面试，面试前可以在牛客找找面经参考一下，面试结束后进行复盘和总结，面试的时候录音，之后花时间重放一下面试里面回答的不好的地方，然后不断优化和改进。</p><p>我还建立了相关的学习 wiki——<a href="https://wiki.lys2021.com/">HAUE-CS-WIKI</a>，有学习路线和课程推荐，后续也会更新一找工作技巧。</p><p>我的个人博客——<a href="https://lys2021.com/">lys2021.com</a>，有我以前学习的笔记，也欢迎一起互相学习。</p><p>最后祝愿在看这篇文章的你有一个光明的前途。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;author: &lt;a href=&quot;https://lys2021.com/2024/11/road-to-king/&quot;&gt;🄻🅈🅂&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;天崩开局，如何破局自救&quot;&gt;&lt;a href=&quot;#天崩开局</summary>
      
    
    
    
    <category term="二本(A/B)のACM协会支持系统博客项目" scheme="https://touristdaughter.cyou/categories/%E4%BA%8C%E6%9C%AC-A-B-%E3%81%AEACM%E5%8D%8F%E4%BC%9A%E6%94%AF%E6%8C%81%E7%B3%BB%E7%BB%9F%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="HAUE" scheme="https://touristdaughter.cyou/tags/HAUE/"/>
    
    <category term="本二ACM" scheme="https://touristdaughter.cyou/tags/%E6%9C%AC%E4%BA%8CACM/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客利用GitHub Pages绑定域名</title>
    <link href="https://touristdaughter.cyou/2025/04/24/Hexo%E5%8D%9A%E5%AE%A2%E5%88%A9%E7%94%A8GitHub%20Pages%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/"/>
    <id>https://touristdaughter.cyou/2025/04/24/Hexo%E5%8D%9A%E5%AE%A2%E5%88%A9%E7%94%A8GitHub%20Pages%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/</id>
    <published>2025-04-24T00:36:05.828Z</published>
    <updated>2025-04-24T10:17:19.346Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo博客利用GitHub-Pages绑定域名"><a href="#Hexo博客利用GitHub-Pages绑定域名" class="headerlink" title="Hexo博客利用GitHub Pages绑定域名"></a>Hexo博客利用GitHub Pages绑定域名</h1><h2 id="1-找到自己的域名管理，解析"><a href="#1-找到自己的域名管理，解析" class="headerlink" title="1.找到自己的域名管理，解析"></a>1.找到自己的域名管理，解析</h2><p><img src="/img/yuming1.png"></p><h2 id="2-添加记录"><a href="#2-添加记录" class="headerlink" title="2.添加记录"></a>2.添加记录</h2><p><img src="/img/yuming2.png"></p><h2 id="3-添加两条记录分别如下"><a href="#3-添加两条记录分别如下" class="headerlink" title="3.添加两条记录分别如下"></a>3.添加两条记录分别如下</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 基于Trie树的域名解析加速</span><br><span class="line">记录类型  名称           值</span><br><span class="line">CNAME     @     username.github.io  # 后缀自动机跳转优化</span><br><span class="line">A         www    185.199.108.153    # 四叉树空间索引，IP即叶节点</span><br></pre></td></tr></table></figure><h3 id="A类型"><a href="#A类型" class="headerlink" title="A类型"></a>A类型</h3><h4 id="先ping一下你的github用户名-github-io，得到一个IP，即A记录值。"><a href="#先ping一下你的github用户名-github-io，得到一个IP，即A记录值。" class="headerlink" title="先ping一下你的github用户名.github.io，得到一个IP，即A记录值。"></a>先ping一下<code>你的github用户名.github.io</code>，得到一个IP，即A记录值。</h4><p><img src="/img/yuming3.png"></p><h4 id="添加A记录"><a href="#添加A记录" class="headerlink" title="添加A记录"></a>添加A记录</h4><p><img src="/img/yuming4.png"></p><h3 id="CNAME类型"><a href="#CNAME类型" class="headerlink" title="CNAME类型"></a>CNAME类型</h3><h4 id="添加CNAME记录"><a href="#添加CNAME记录" class="headerlink" title="添加CNAME记录"></a>添加CNAME记录</h4><p><img src="/img/yuming5.png"></p><h2 id="4-在-GitHub-仓库中添加-CNAME-文件"><a href="#4-在-GitHub-仓库中添加-CNAME-文件" class="headerlink" title="4.在 GitHub 仓库中添加 CNAME 文件"></a>4.在 GitHub 仓库中添加 <code>CNAME</code> 文件</h2><p>在 <code>GitHub</code> 仓库的根目录下创建一个名为 <code>CNAME</code> 的文件（无扩展名），文件内容为自定义域名。</p><p>示例：</p><p>如果的自定义域名是 <code>www.example.com</code>，则 CNAME 文件内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.example.com</span><br></pre></td></tr></table></figure><p>如果使用的是顶级域名 <code>example.com</code>，则内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example.com</span><br></pre></td></tr></table></figure><p>再在本地磁盘<code>hexo</code>目录下的<code>source文件夹</code>生成<code>CNAME</code>文件，里面写上你的域名。</p><h2 id="5-在GitHub上面添加自己的域名"><a href="#5-在GitHub上面添加自己的域名" class="headerlink" title="5.在GitHub上面添加自己的域名"></a>5.在GitHub上面添加自己的域名</h2><p><img src="/img/yuming6.png"><br><img src="/img/yuming7.png"><br><img src="/img/yuming8.png"></p><p>然后填写你的域名。</p><h2 id="6-添加TXT验证域名所有权"><a href="#6-添加TXT验证域名所有权" class="headerlink" title="6.添加TXT验证域名所有权"></a>6.添加TXT验证域名所有权</h2><h3 id="获取验证记录"><a href="#获取验证记录" class="headerlink" title="获取验证记录"></a>获取验证记录</h3><p>在 <code>GitHub Pages</code> 设置页面，如果需要验证域名所有权，<code>GitHub</code> 会提供一条 <code>TXT</code> 记录的值。<br><img src="/img/yuming10.png"></p><h3 id="添加-TXT-记录"><a href="#添加-TXT-记录" class="headerlink" title="添加 TXT 记录"></a>添加 <code>TXT</code> 记录</h3><p>回到域名注册商的管理面板，点击<code>解析</code>,来到DNS管理面板。</p><p>添加以下 <code>TXT</code> 记录：<br><img src="/img/yuming9.png"><br><img src="/img/yuming11.png"></p><p>保存设置，等待生效。</p><p>进入仓库<code>Settings</code>栏，填入<code>域名</code>，并勾选<code>Enforce HTTPS</code><br><img src="/img/yuming12.png"></p><h1 id="Done"><a href="#Done" class="headerlink" title="Done."></a>Done.</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Hexo博客利用GitHub-Pages绑定域名&quot;&gt;&lt;a href=&quot;#Hexo博客利用GitHub-Pages绑定域名&quot; class=&quot;headerlink&quot; title=&quot;Hexo博客利用GitHub Pages绑定域名&quot;&gt;&lt;/a&gt;Hexo博客利用GitHub</summary>
      
    
    
    
    <category term="关于本站、博客搭建" scheme="https://touristdaughter.cyou/categories/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E3%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Hexo" scheme="https://touristdaughter.cyou/tags/Hexo/"/>
    
    <category term="GitHub" scheme="https://touristdaughter.cyou/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>JiangnanPsalter的算法征程：暂别与归来</title>
    <link href="https://touristdaughter.cyou/2025/04/23/JiangnanPsalter%E7%9A%84%E7%AE%97%E6%B3%95%E5%BE%81%E7%A8%8B%EF%BC%9A%E6%9A%82%E5%88%AB%E4%B8%8E%E5%BD%92%E6%9D%A5/"/>
    <id>https://touristdaughter.cyou/2025/04/23/JiangnanPsalter%E7%9A%84%E7%AE%97%E6%B3%95%E5%BE%81%E7%A8%8B%EF%BC%9A%E6%9A%82%E5%88%AB%E4%B8%8E%E5%BD%92%E6%9D%A5/</id>
    <published>2025-04-23T15:06:38.612Z</published>
    <updated>2025-04-30T12:44:40.811Z</updated>
    
    <content type="html"><![CDATA[<h1 id="🔥「JiangnanPsalter的算法征程：暂别与归来」"><a href="#🔥「JiangnanPsalter的算法征程：暂别与归来」" class="headerlink" title="🔥「JiangnanPsalter的算法征程：暂别与归来」"></a>🔥「JiangnanPsalter的算法征程：暂别与归来」</h1><h3 id="——三年沉淀，如今携代码之魂重返算法电子竞技场"><a href="#——三年沉淀，如今携代码之魂重返算法电子竞技场" class="headerlink" title="——三年沉淀，如今携代码之魂重返算法电子竞技场"></a>——三年沉淀，如今携代码之魂重返算法电子竞技场</h3><hr><h1 id="🚀-关于我"><a href="#🚀-关于我" class="headerlink" title="🚀 关于我"></a>🚀 关于我</h1><p>我是 JiangnanPsalter，一名狂热的算法竞赛爱好者。大学本科期间，我有幸加入校级ACM实验室 &amp; 协会，成为其中一员，与队友并肩作战，学习 C  、 C++  和  ACM  算法。  </p><p>然而，前年因论文研究 &amp; 学术事务，我不得不暂别算法竞赛，将重心转向科研。如今，随着阶段性任务的完成，我正式宣布：  </p><p>🔊 2025年，我回来了！  </p><hr><h3 id="📅-当前状态"><a href="#📅-当前状态" class="headerlink" title="📅 当前状态"></a>📅 当前状态</h3><ul><li>训练模式：全天候投入（全年无工作和环境干扰，专注刷题 &amp; 比赛）  </li><li>复健进度：C++康复训练中（三年未碰算法，正在重拾STL、动态规划、图论等核心技能）  </li><li>VP邀约：开放组队（ 【C++康复训练完之后】欢迎志同道合的朋友一起<code>Virtual Participation</code>！）</li></ul><hr><h3 id="🎯-为什么回归？"><a href="#🎯-为什么回归？" class="headerlink" title="🎯 为什么回归？"></a>🎯 为什么回归？</h3><ol><li>热爱从未消退  <ul><li>即使暂停比赛，我仍会偶尔点开  tourist  的提交记录，研究他的码风。  </li><li>每次看到  CF  的比赛通知，手指都会不自觉地想注册。</li></ul></li><li>未竟的执念  <ul><li>当年因实力不足，未能冲进  ICPC ，如今想弥补遗憾。  </li><li>想证明：“即使中断三年，依然可以重回巅峰。”</li></ul></li></ol><hr><h3 id="💡-致谢：那些年带我成长的CAFN战友"><a href="#💡-致谢：那些年带我成长的CAFN战友" class="headerlink" title="💡 致谢：那些年带我成长的CAFN战友"></a>💡 致谢：那些年带我成长的CAFN战友</h3><p>回归之际，不得不提当年在QQ群「CAFN」的岁月。这个由各路算法爱好者组成的网络组织，曾是我进步的摇篮。  </p><p>特别感谢：  </p><ul><li><code>- Astraia -</code>（人称lys，全栈开发宗师。冷静分析帝，教我如何理性debug）  </li><li><code>沉淀哥</code>（暴力美学大师，让我学会“先写再优化”，告诉我不要怕）  </li><li><code>hope姐</code> （手把手教我平衡树，量子旋转因子操控者）</li><li><code>taotao姐</code> （温柔代码力场，算法稳定态守护神）</li><li><code>cj哥</code>（状态空间破壁人，高维搜索的时空折叠者）</li><li><code>刀哥</code>（分治刀锋，递归森林的居合斩者）</li><li><code>XrkArul哥</code>（数据结构之王，手搓A-H题解的acm银牌大神）</li><li><code>Jk_eight哥</code>（混沌工程先知，分布式系统的量子纠缠师）  </li><li><code>scanner</code>（我的师父，用最狠的话骂出最稳的代码）  </li><li><code>傻孩子</code>（二进制吟游诗人，机器码与人类语的量子翻译官）</li><li><code>笙笙哥</code>（数学鬼才，数论题全靠他救命）  </li><li><code>黛西哥</code>（贪心策略之王，让我学会“局部最优≠全局最优”）  </li><li><code>彩虹哥</code>（比赛心态导师，告诉我“WA是过程，AC是必然”）  </li><li><code>破晓哥</code>（动态规划宗师，状态转移方程设计全靠他掌舵）</li><li><code>羊哥Clumsy_</code>（摆烂能量守恒定律奠基人，教会我反内卷波动方程和量子摸鱼协议（已获IEEE认证））<blockquote><p>补丁说明v2.3.3<br>将羊哥写入ACM基地核心DNA螺旋链（ATCG碱基替换为ACME）<br>在ACM团队LOGO暗纹加入羊哥摸鱼剪影（需紫外线照射可见）<br>所有成员的光轴键盘新增<code>Alt+Shift+🐑</code>快捷键（一键启动量子摸鱼协议）<br>输入 <code>docker run --rm -it 羊哥的认可</code> 领取限量版”摆烂者联盟”勋章</p></blockquote></li></ul><p>最后感谢我自己，人称<code>江南姐</code>&#x2F;<code>厂妹</code>&#x2F;<code>诗诗姐</code>&#x2F;<code>jiangnanpsalter</code>：在咖啡因与δ-ε的双重暴走中，我的战术背包装载着《算法导论》与《核工程原理》，用奶茶店的扫码枪解析柯西收敛准则，让自习室的日光灯管辐射出教学楼的量子投影</p><p>当时的我，总觉得自己很菜，不敢和他们比肩。<br>但如今回头看，正是这群人的严格指导，让我在短时间内飞速成长。  </p><p>可惜的是，他们大多已退役，或忙于工作，或转向其他领域。<br>但他们的精神仍在——而我会带着这份传承，继续征战。  </p><h3 id="还有特别鸣谢shh弟弟一直鼓励我并且给我寄了一本《C-primer》前六章，使我受到极客思想的熏陶。"><a href="#还有特别鸣谢shh弟弟一直鼓励我并且给我寄了一本《C-primer》前六章，使我受到极客思想的熏陶。" class="headerlink" title="还有特别鸣谢shh弟弟一直鼓励我并且给我寄了一本《C++ primer》前六章，使我受到极客思想的熏陶。"></a>还有特别鸣谢<a href="https://www.acwing.com/user/myspace/index/193181/">shh弟弟</a>一直鼓励我并且给我寄了一本《C++ primer》前六章，使我受到极客思想的熏陶。</h3><h3 id="最重要的是感恩遇见AcWing，-y-总讲的很好，只不过我比较愚钝，需要思考和消化一段时间才能完全吸收，在此声明-希望-yxc-老师不要删库跑路了"><a href="#最重要的是感恩遇见AcWing，-y-总讲的很好，只不过我比较愚钝，需要思考和消化一段时间才能完全吸收，在此声明-希望-yxc-老师不要删库跑路了" class="headerlink" title="最重要的是感恩遇见AcWing， y  总讲的很好，只不过我比较愚钝，需要思考和消化一段时间才能完全吸收，在此声明 希望 @yxc 老师不要删库跑路了~~"></a>最重要的是感恩遇见<a href="https://www.acwing.com/">AcWing</a>， y  总讲的很好，只不过我比较愚钝，需要思考和消化一段时间才能完全吸收，在此声明 希望 @yxc 老师不要删库跑路了~~</h3><hr><h3 id="🏆-未来计划"><a href="#🏆-未来计划" class="headerlink" title="🏆 未来计划"></a>🏆 未来计划</h3><ol><li>短期（3个月）  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这不能说。</span><br></pre></td></tr></table></figure></li><li>中期（6个月）  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这不能说。</span><br></pre></td></tr></table></figure></li><li>长期（1年+）  <ul><li>带队训练（如果有新人愿意一起进步）  </li><li>写算法教程（把师父scanner的“暴躁教学法”改良成温和版）</li></ul></li></ol><hr><h3 id="🌟-最后的话"><a href="#🌟-最后的话" class="headerlink" title="🌟 最后的话"></a>🌟 最后的话</h3><p>“算法竞赛不是短跑，而是马拉松。”<br>即使三年没碰，我依然相信，只要保持热爱，坚持训练，终能重回巅峰。  </p><p>如果你也在复健，或者想找VP队友，欢迎联系我！<br>📮 邮箱：<a href="mailto:&#106;&#x69;&#97;&#x6e;&#103;&#110;&#97;&#x6e;&#x70;&#x73;&#x61;&#x6c;&#116;&#101;&#x72;&#x40;&#102;&#x6f;&#120;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;">&#106;&#x69;&#97;&#x6e;&#103;&#110;&#97;&#x6e;&#x70;&#x73;&#x61;&#x6c;&#116;&#101;&#x72;&#x40;&#102;&#x6f;&#120;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;</a>  </p><p>“这一次，我不会再轻易离开。”  </p><hr><h3 id="JiangnanPsalter"><a href="#JiangnanPsalter" class="headerlink" title="JiangnanPsalter"></a>JiangnanPsalter</h3><p>2025年 · 正式回归  </p><h3 id="JiangnanPsalter-始终还是-JiangnanPsalter-啊"><a href="#JiangnanPsalter-始终还是-JiangnanPsalter-啊" class="headerlink" title="JiangnanPsalter 始终还是 JiangnanPsalter 啊."></a>JiangnanPsalter 始终还是 JiangnanPsalter 啊.</h3><p>（P.S. Scanner 师父，我回来了，准备好继续骂我 WA 的代码了吗？ 😏）  </p><blockquote><p>WARNING (“⚠️ In three seconds, my blog will become my instructor’s cyber potted plant…”). Welcome to Master’s digital garden. 🌱✨</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;🔥「JiangnanPsalter的算法征程：暂别与归来」&quot;&gt;&lt;a href=&quot;#🔥「JiangnanPsalter的算法征程：暂别与归来」&quot; class=&quot;headerlink&quot; title=&quot;🔥「JiangnanPsalter的算法征程：暂别与归来」&quot;&gt;</summary>
      
    
    
    
    <category term="通知与公示" scheme="https://touristdaughter.cyou/categories/%E9%80%9A%E7%9F%A5%E4%B8%8E%E5%85%AC%E7%A4%BA/"/>
    
    
    <category term="ACM" scheme="https://touristdaughter.cyou/tags/ACM/"/>
    
    <category term="OI" scheme="https://touristdaughter.cyou/tags/OI/"/>
    
    <category term="MONSOON" scheme="https://touristdaughter.cyou/tags/MONSOON/"/>
    
    <category term="JiangnanPsalter" scheme="https://touristdaughter.cyou/tags/JiangnanPsalter/"/>
    
    <category term="CAFN" scheme="https://touristdaughter.cyou/tags/CAFN/"/>
    
    <category term="Codeforces" scheme="https://touristdaughter.cyou/tags/Codeforces/"/>
    
    <category term="AcWing" scheme="https://touristdaughter.cyou/tags/AcWing/"/>
    
  </entry>
  
  <entry>
    <title>人生算法：用计算机思维优化真实难题</title>
    <link href="https://touristdaughter.cyou/2025/04/22/%E4%BA%BA%E7%94%9F%E7%AE%97%E6%B3%95%EF%BC%9A%E7%94%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%80%9D%E7%BB%B4%E4%BC%98%E5%8C%96%E7%9C%9F%E5%AE%9E%E9%9A%BE%E9%A2%98/"/>
    <id>https://touristdaughter.cyou/2025/04/22/%E4%BA%BA%E7%94%9F%E7%AE%97%E6%B3%95%EF%BC%9A%E7%94%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%80%9D%E7%BB%B4%E4%BC%98%E5%8C%96%E7%9C%9F%E5%AE%9E%E9%9A%BE%E9%A2%98/</id>
    <published>2025-04-22T11:05:21.000Z</published>
    <updated>2025-04-23T11:06:20.565Z</updated>
    
    <content type="html"><![CDATA[<h1 id="人生算法：用计算机思维优化真实难题"><a href="#人生算法：用计算机思维优化真实难题" class="headerlink" title="人生算法：用计算机思维优化真实难题"></a>人生算法：用计算机思维优化真实难题</h1><p><strong>——当你的生活遇上NP-Hard问题，如何设计最优解？</strong>  </p><hr><h3 id="🔍-问题建模：你的生活是一段待优化的代码"><a href="#🔍-问题建模：你的生活是一段待优化的代码" class="headerlink" title="🔍 问题建模：你的生活是一段待优化的代码"></a><strong>🔍 问题建模：你的生活是一段待优化的代码</strong></h3><p>假设你的生活是一个<strong>多线程程序</strong>，每个问题都是一个<strong>子任务</strong>，而你的目标是在<strong>有限资源（时间、精力、金钱）</strong>下，找到最高效的执行路径。  </p><h4 id="1-时间管理：任务调度算法"><a href="#1-时间管理：任务调度算法" class="headerlink" title="1. 时间管理：任务调度算法"></a><strong>1. 时间管理：任务调度算法</strong></h4><p><strong>问题</strong>：每天事情太多，不知道先做哪个？<br><strong>算法策略</strong>：<strong>最短作业优先（SJF） + 动态优先级调整</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">任务调度</span>(<span class="params">任务列表</span>):</span><br><span class="line">    <span class="comment"># 先处理耗时最短的任务（快速获得成就感）</span></span><br><span class="line">    任务列表.sort(key=<span class="keyword">lambda</span> x: x.预计耗时)</span><br><span class="line">    <span class="comment"># 动态调整：紧急任务插队（DDL逼近时优先级↑）</span></span><br><span class="line">    <span class="keyword">for</span> 任务 <span class="keyword">in</span> 任务列表:</span><br><span class="line">        <span class="keyword">if</span> 任务.截止时间 - 当前时间 &lt; <span class="number">2</span>小时:</span><br><span class="line">            任务.优先级 = 紧急</span><br><span class="line">    <span class="keyword">return</span> 执行(任务列表)</span><br></pre></td></tr></table></figure><p><strong>现实应用</strong>：  </p><ul><li>早上先处理<strong>5分钟内能搞定的小事</strong>（回邮件、整理桌面）  </li><li>下午专注<strong>高优先级项目</strong>（写论文、刷题）  </li><li>晚上留buffer应对突发任务</li></ul><hr><h4 id="2-拖延症：死锁检测与破解"><a href="#2-拖延症：死锁检测与破解" class="headerlink" title="2. 拖延症：死锁检测与破解"></a><strong>2. 拖延症：死锁检测与破解</strong></h4><p><strong>问题</strong>：明明有事要做，却一直刷手机？<br><strong>算法策略</strong>：<strong>银行家算法（预防死锁） + 超时中断</strong>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (检测到拖延行为) &#123;</span><br><span class="line">        强制中断(<span class="string">&quot;手机进程&quot;</span>);  </span><br><span class="line">        分配资源(专注力, 给<span class="string">&quot;正事线程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (专注时长 &gt;= <span class="number">25</span>分钟) &#123;</span><br><span class="line">        触发奖励机制();  <span class="comment">// 休息5分钟</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>现实应用</strong>：  </p><ul><li>用<strong>Forest App</strong>种树，强制锁死娱乐App  </li><li>25分钟工作+5分钟休息（番茄钟算法）  </li><li>如果拖延超30分钟，启动「自毁模式」（如发朋友圈立Flag）</li></ul><hr><h4 id="3-社交关系：图论与聚类分析"><a href="#3-社交关系：图论与聚类分析" class="headerlink" title="3. 社交关系：图论与聚类分析"></a><strong>3. 社交关系：图论与聚类分析</strong></h4><p><strong>问题</strong>：朋友很多，但真正有用的很少？<br><strong>算法策略</strong>：<strong>社区发现（Community Detection） + PageRank重要度排序</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">社交图 = 构建社交网络(微信好友)</span><br><span class="line">重要好友 = PageRank(社交图).topK(<span class="number">10</span>)  <span class="comment"># 找出影响力最高的10人</span></span><br><span class="line">无效社交 = 社区检测(社交图).过滤(低互动社区)</span><br><span class="line">删除好友(无效社交)  <span class="comment"># 剪枝优化</span></span><br></pre></td></tr></table></figure><p><strong>现实应用</strong>：  </p><ul><li><strong>重要好友</strong>：定期维护（每周聊一次）  </li><li><strong>无效社交</strong>：屏蔽朋友圈或直接删除  </li><li><strong>新人评估</strong>：计算「互动频率&#x2F;共同兴趣」再决定是否深交</li></ul><hr><h4 id="4-情绪管理：状态机与异常处理"><a href="#4-情绪管理：状态机与异常处理" class="headerlink" title="4. 情绪管理：状态机与异常处理"></a><strong>4. 情绪管理：状态机与异常处理</strong></h4><p><strong>问题</strong>：情绪容易崩，影响效率？<br><strong>算法策略</strong>：<strong>有限状态机（FSM） + Try-Catch机制</strong>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A[平静] --&gt;|遇到挫折| B[愤怒]</span><br><span class="line">    B --&gt;|深呼吸5次| C[冷静分析]</span><br><span class="line">    C --&gt;|解决| A</span><br><span class="line">    C --&gt;|未解决| D[求助外部API]</span><br></pre></td></tr></table></figure><p><strong>现实应用</strong>：  </p><ul><li>当情绪进入「愤怒&#x2F;焦虑」状态时：  <ul><li><code>Try&#123; 理性分析问题 &#125;</code>  </li><li><code>Catch&#123; 崩溃 =&gt; 调用朋友安慰() &#125;</code></li></ul></li><li>睡前运行「垃圾回收」：写日记释放情绪内存</li></ul><hr><h3 id="🚀-终极优化：人生算法框架"><a href="#🚀-终极优化：人生算法框架" class="headerlink" title="🚀 终极优化：人生算法框架"></a><strong>🚀 终极优化：人生算法框架</strong></h3><p>把你的生活封装成一个<strong>高性能系统</strong>：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">我的生活</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.资源 = &#123;<span class="string">&quot;时间&quot;</span>: <span class="number">24</span>*<span class="number">60</span>, <span class="string">&quot;精力&quot;</span>: <span class="number">100</span>, <span class="string">&quot;金钱&quot;</span>: 预算&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">每日优化</span>(<span class="params">self</span>):</span><br><span class="line">        任务列表 = 获取今日任务()</span><br><span class="line">        任务列表 = 任务调度(任务列表)</span><br><span class="line">        <span class="keyword">for</span> 任务 <span class="keyword">in</span> 任务列表:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                执行(任务)</span><br><span class="line">            <span class="keyword">except</span> 情绪崩溃 <span class="keyword">as</span> e:</span><br><span class="line">                日志记录(e)</span><br><span class="line">                自我修复()</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                self.资源[<span class="string">&quot;精力&quot;</span>] -= 任务.消耗</span><br><span class="line">                <span class="keyword">if</span> self.资源[<span class="string">&quot;精力&quot;</span>] &lt; <span class="number">20</span>:</span><br><span class="line">                    强制休息()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">长期策略</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            投资自我(技能=<span class="string">&quot;算法&quot;</span>, 健康=<span class="string">&quot;健身&quot;</span>)</span><br><span class="line">            剪枝无效社交()</span><br><span class="line">            动态调整优先级()</span><br></pre></td></tr></table></figure><p><strong>核心指标</strong>：  </p><ul><li><strong>吞吐量</strong>：每天完成多少有价值的事？  </li><li><strong>延迟</strong>：从想到做要多久？  </li><li><strong>容错率</strong>：遇到意外能否快速恢复？</li></ul><hr><h3 id="💡-如何开始实践？"><a href="#💡-如何开始实践？" class="headerlink" title="💡 如何开始实践？"></a><strong>💡 如何开始实践？</strong></h3><ol><li><strong>日志模块</strong>：记录每天的时间分配（像打CF一样写赛后总结）  </li><li><strong>性能分析</strong>：每周用<code>Python + Matplotlib</code>画「时间-精力」分布图  </li><li><strong>A&#x2F;B测试</strong>：对比不同策略的效率（如「早起vs熬夜」哪个更适合你）</li></ol><p>（你的生活，就是你要优化的<strong>终极算法</strong>）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;人生算法：用计算机思维优化真实难题&quot;&gt;&lt;a href=&quot;#人生算法：用计算机思维优化真实难题&quot; class=&quot;headerlink&quot; title=&quot;人生算法：用计算机思维优化真实难题&quot;&gt;&lt;/a&gt;人生算法：用计算机思维优化真实难题&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;——</summary>
      
    
    
    
    <category term="博主的观点和态度" scheme="https://touristdaughter.cyou/categories/%E5%8D%9A%E4%B8%BB%E7%9A%84%E8%A7%82%E7%82%B9%E5%92%8C%E6%80%81%E5%BA%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>我的一个OIer朋友</title>
    <link href="https://touristdaughter.cyou/2025/04/21/%E6%88%91%E7%9A%84%E4%B8%80%E4%B8%AAOIer%E6%9C%8B%E5%8F%8B/"/>
    <id>https://touristdaughter.cyou/2025/04/21/%E6%88%91%E7%9A%84%E4%B8%80%E4%B8%AAOIer%E6%9C%8B%E5%8F%8B/</id>
    <published>2025-04-21T14:06:03.656Z</published>
    <updated>2025-04-21T14:37:08.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我的一个OIer朋友"><a href="#我的一个OIer朋友" class="headerlink" title="我的一个OIer朋友"></a>我的一个OIer朋友</h1><blockquote><p>本文来源：<a href="https://www.bilibili.com/video/BV1KW411E7gu/?spm_id_from=333.337.search-card.all.click&vd_source=c9c9d7d71330866a034de1baf1743b8e">https://www.bilibili.com/video/BV1KW411E7gu/?spm_id_from=333.337.search-card.all.click&amp;vd_source=c9c9d7d71330866a034de1baf1743b8e</a></p></blockquote><h3 id="那年少年-意气正浓"><a href="#那年少年-意气正浓" class="headerlink" title="那年少年 意气正浓"></a>那年少年 意气正浓</h3><h3 id="一行AC-一次欢腾"><a href="#一行AC-一次欢腾" class="headerlink" title="一行AC 一次欢腾"></a>一行AC 一次欢腾</h3><h3 id="那年学长壮志满胸"><a href="#那年学长壮志满胸" class="headerlink" title="那年学长壮志满胸"></a>那年学长壮志满胸</h3><h3 id="满座后生-听他谈笑间算法不再难懂"><a href="#满座后生-听他谈笑间算法不再难懂" class="headerlink" title="满座后生 听他谈笑间算法不再难懂"></a>满座后生 听他谈笑间算法不再难懂</h3><h3 id="树上路径-分清边孰轻孰重"><a href="#树上路径-分清边孰轻孰重" class="headerlink" title="树上路径 分清边孰轻孰重"></a>树上路径 分清边孰轻孰重</h3><h3 id="高次不定方程-线性同余方程"><a href="#高次不定方程-线性同余方程" class="headerlink" title="高次不定方程 线性同余方程"></a>高次不定方程 线性同余方程</h3><h3 id="任他变化无穷"><a href="#任他变化无穷" class="headerlink" title="任他变化无穷"></a>任他变化无穷</h3><h3 id="lazy标记有没有清空"><a href="#lazy标记有没有清空" class="headerlink" title="lazy标记有没有清空"></a>lazy标记有没有清空</h3><h3 id="离散化时有没有去重"><a href="#离散化时有没有去重" class="headerlink" title="离散化时有没有去重"></a>离散化时有没有去重</h3><h3 id="你的眼神锐利如锋-一眼挑漏洞"><a href="#你的眼神锐利如锋-一眼挑漏洞" class="headerlink" title="你的眼神锐利如锋 一眼挑漏洞"></a>你的眼神锐利如锋 一眼挑漏洞</h3><h3 id="而你深夜刷题至三更"><a href="#而你深夜刷题至三更" class="headerlink" title="而你深夜刷题至三更"></a>而你深夜刷题至三更</h3><h3 id="O（松）算法通过多从容"><a href="#O（松）算法通过多从容" class="headerlink" title="O（松）算法通过多从容"></a>O（松）算法通过多从容</h3><h3 id="而你笑道正解无用"><a href="#而你笑道正解无用" class="headerlink" title="而你笑道正解无用"></a>而你笑道正解无用</h3><h3 id="暴力把分送-AK都轻松"><a href="#暴力把分送-AK都轻松" class="headerlink" title="暴力把分送 AK都轻松"></a>暴力把分送 AK都轻松</h3><h3 id="记忆截断退役之后"><a href="#记忆截断退役之后" class="headerlink" title="记忆截断退役之后"></a>记忆截断退役之后</h3><h3 id="未有名次-OI难留"><a href="#未有名次-OI难留" class="headerlink" title="未有名次 OI难留"></a>未有名次 OI难留</h3><h3 id="如今已是-物是人非-身影作旧"><a href="#如今已是-物是人非-身影作旧" class="headerlink" title="如今已是 物是人非 身影作旧"></a>如今已是 物是人非 身影作旧</h3><h3 id="恍然又记起你讲题的时候"><a href="#恍然又记起你讲题的时候" class="headerlink" title="恍然又记起你讲题的时候"></a>恍然又记起你讲题的时候</h3><h3 id="动态规划-决策单调变更优"><a href="#动态规划-决策单调变更优" class="headerlink" title="动态规划 决策单调变更优"></a>动态规划 决策单调变更优</h3><h3 id="上下界网络流-增广路费用流"><a href="#上下界网络流-增广路费用流" class="headerlink" title="上下界网络流 增广路费用流"></a>上下界网络流 增广路费用流</h3><h3 id="这一步-往哪走"><a href="#这一步-往哪走" class="headerlink" title="这一步 往哪走"></a>这一步 往哪走</h3><h3 id="常数优化多小才算够"><a href="#常数优化多小才算够" class="headerlink" title="常数优化多小才算够"></a>常数优化多小才算够</h3><h3 id="反演几次答案才能求"><a href="#反演几次答案才能求" class="headerlink" title="反演几次答案才能求"></a>反演几次答案才能求</h3><h3 id="你的话语清晰易懂-将题解拼凑"><a href="#你的话语清晰易懂-将题解拼凑" class="headerlink" title="你的话语清晰易懂 将题解拼凑"></a>你的话语清晰易懂 将题解拼凑</h3><h3 id="再不能与你旧约相守-将那算法导论去看透"><a href="#再不能与你旧约相守-将那算法导论去看透" class="headerlink" title="再不能与你旧约相守 将那算法导论去看透"></a>再不能与你旧约相守 将那算法导论去看透</h3><h3 id="难忘记你笑脸温柔"><a href="#难忘记你笑脸温柔" class="headerlink" title="难忘记你笑脸温柔"></a>难忘记你笑脸温柔</h3><h3 id="命运如锁扣-路我代你走"><a href="#命运如锁扣-路我代你走" class="headerlink" title="命运如锁扣 路我代你走"></a>命运如锁扣 路我代你走</h3><h3 id="机房里-白板已擦净-将你字迹清除"><a href="#机房里-白板已擦净-将你字迹清除" class="headerlink" title="机房里 白板已擦净 将你字迹清除"></a>机房里 白板已擦净 将你字迹清除</h3><h3 id="独自地-在机房里做着你留的题目"><a href="#独自地-在机房里做着你留的题目" class="headerlink" title="独自地 在机房里做着你留的题目"></a>独自地 在机房里做着你留的题目</h3><h3 id="或许有时-还会突然怀念你给的帮助"><a href="#或许有时-还会突然怀念你给的帮助" class="headerlink" title="或许有时 还会突然怀念你给的帮助"></a>或许有时 还会突然怀念你给的帮助</h3><h3 id="你告诉我-绝不认输"><a href="#你告诉我-绝不认输" class="headerlink" title="你告诉我 绝不认输"></a>你告诉我 绝不认输</h3><h3 id="他们说的退役太沉重-你在路上追着你的梦"><a href="#他们说的退役太沉重-你在路上追着你的梦" class="headerlink" title="他们说的退役太沉重 你在路上追着你的梦"></a>他们说的退役太沉重 你在路上追着你的梦</h3><h3 id="前路会与过往不同-但精彩纷呈"><a href="#前路会与过往不同-但精彩纷呈" class="headerlink" title="前路会与过往不同 但精彩纷呈"></a>前路会与过往不同 但精彩纷呈</h3><h3 id="而我深夜刷题至三更-大赛过后睡眼正惺忪"><a href="#而我深夜刷题至三更-大赛过后睡眼正惺忪" class="headerlink" title="而我深夜刷题至三更 大赛过后睡眼正惺忪"></a>而我深夜刷题至三更 大赛过后睡眼正惺忪</h3><h3 id="恍然之间终于看懂-当年你笑容-谈何轻松"><a href="#恍然之间终于看懂-当年你笑容-谈何轻松" class="headerlink" title="恍然之间终于看懂 当年你笑容 谈何轻松"></a>恍然之间终于看懂 当年你笑容 谈何轻松</h3><h3 id="不如将你镌刻在心中-以足迹为路-以背影为灯"><a href="#不如将你镌刻在心中-以足迹为路-以背影为灯" class="headerlink" title="不如将你镌刻在心中 以足迹为路 以背影为灯"></a>不如将你镌刻在心中 以足迹为路 以背影为灯</h3><h3 id="去年今日-你的歌声-由我来传承"><a href="#去年今日-你的歌声-由我来传承" class="headerlink" title="去年今日 你的歌声 由我来传承"></a>去年今日 你的歌声 由我来传承</h3><h3 id="省选亚太精英旧路上过-春风拂袖暖阳正当空"><a href="#省选亚太精英旧路上过-春风拂袖暖阳正当空" class="headerlink" title="省选亚太精英旧路上过 春风拂袖暖阳正当空"></a>省选亚太精英旧路上过 春风拂袖暖阳正当空</h3><h3 id="定有某日OI赛中-荧幕之前-台阶之上-看奖牌芳容"><a href="#定有某日OI赛中-荧幕之前-台阶之上-看奖牌芳容" class="headerlink" title="定有某日OI赛中 荧幕之前 台阶之上 看奖牌芳容"></a>定有某日OI赛中 荧幕之前 台阶之上 看奖牌芳容</h3><h3 id="六月至七月-远方等候-你为我光荣"><a href="#六月至七月-远方等候-你为我光荣" class="headerlink" title="六月至七月 远方等候 你为我光荣"></a>六月至七月 远方等候 你为我光荣</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;我的一个OIer朋友&quot;&gt;&lt;a href=&quot;#我的一个OIer朋友&quot; class=&quot;headerlink&quot; title=&quot;我的一个OIer朋友&quot;&gt;&lt;/a&gt;我的一个OIer朋友&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本文来源：&lt;a href=&quot;https://www</summary>
      
    
    
    
    <category term="歌曲推荐" scheme="https://touristdaughter.cyou/categories/%E6%AD%8C%E6%9B%B2%E6%8E%A8%E8%8D%90/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo博客butterfly主题添加看板娘</title>
    <link href="https://touristdaughter.cyou/2025/04/20/Hexo%E5%8D%9A%E5%AE%A2butterfly%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E7%9C%8B%E6%9D%BF%E5%A8%98/"/>
    <id>https://touristdaughter.cyou/2025/04/20/Hexo%E5%8D%9A%E5%AE%A2butterfly%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E7%9C%8B%E6%9D%BF%E5%A8%98/</id>
    <published>2025-04-19T16:52:36.000Z</published>
    <updated>2025-04-21T15:08:08.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo博客butterfly主题添加看板娘"><a href="#Hexo博客butterfly主题添加看板娘" class="headerlink" title="Hexo博客butterfly主题添加看板娘"></a>Hexo博客butterfly主题添加看板娘</h1><h1 id="第一步：安装插件"><a href="#第一步：安装插件" class="headerlink" title="第一步：安装插件"></a>第一步：安装插件</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><h1 id="第二步：安装模型"><a href="#第二步：安装模型" class="headerlink" title="第二步：安装模型"></a>第二步：安装模型</h1><p>使用<code>npm install &#123;packagename&#125;</code>进行安装模型，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install live2d-widget-model-shizuku -S</span><br></pre></td></tr></table></figure><h1 id="第三步：配置"><a href="#第三步：配置" class="headerlink" title="第三步：配置"></a>第三步：配置</h1><p>在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中新增如下内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Live2D</span></span><br><span class="line"><span class="comment">## https://github.com/EYHN/hexo-helper-live2d</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># enable: false</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span> <span class="comment"># 默认</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span> <span class="comment"># 插件在站点上的根目录(相对路径)</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span> <span class="comment"># 脚本文件相对与插件根目录路径</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span> <span class="comment"># 模型文件相对与插件根目录路径</span></span><br><span class="line">  <span class="comment"># scriptFrom: jsdelivr # jsdelivr CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: unpkg # unpkg CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span> <span class="comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span></span><br><span class="line">  <span class="attr">debug:</span> <span class="literal">false</span> <span class="comment"># 调试, 是否在控制台输出日志</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-wanko</span> <span class="comment"># 第二步下载的模型</span></span><br><span class="line">    <span class="comment"># use: wanko # 博客根目录/live2d_models/ 下的目录名</span></span><br><span class="line">    <span class="comment"># use: ./wives/wanko # 相对于博客根目录的路径</span></span><br><span class="line">    <span class="comment"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span> <span class="comment"># 手机中是否展示</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Hexo博客butterfly主题添加看板娘&quot;&gt;&lt;a href=&quot;#Hexo博客butterfly主题添加看板娘&quot; class=&quot;headerlink&quot; title=&quot;Hexo博客butterfly主题添加看板娘&quot;&gt;&lt;/a&gt;Hexo博客butterfly主题添加看</summary>
      
    
    
    
    <category term="关于本站、博客搭建" scheme="https://touristdaughter.cyou/categories/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E3%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>基础算法</title>
    <link href="https://touristdaughter.cyou/2025/04/17/1.%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    <id>https://touristdaughter.cyou/2025/04/17/1.%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</id>
    <published>2025-04-17T08:09:39.279Z</published>
    <updated>2025-04-17T08:21:50.471Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>powered by <a href="https://www.acwing.com/">AcWing</a><br>本文总结记录了我的<a href="https://www.acwing.com/activity/content/11/">基础算法</a>作业完成情况</p></blockquote><h1 id="第一讲-基础算法"><a href="#第一讲-基础算法" class="headerlink" title="第一讲 基础算法"></a>第一讲 基础算法</h1><blockquote><p>完成情况：20&#x2F;20<br>包括排序、二分、高精度、前缀和与差分、双指针算法、位运算、离散化、区间合并等内容。</p></blockquote><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;bits/stdc++.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">swap</span>(q[l], q[l + <span class="built_in">rand</span>() % (r - l + <span class="number">1</span>)]);</span><br><span class="line">    <span class="type">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = q[l];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">do</span> i ++ ; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j -- ; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">quick_sort</span>(q, l, j);</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">quick_sort</span>(q, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;bits/stdc++.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> q[N], tmp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">merge_sort</span>(q, l, mid), <span class="built_in">merge_sort</span>(q, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, i = l , j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">        <span class="keyword">else</span> tmp[k ++ ] = q[j ++ ];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = l, j = <span class="number">0</span>; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">merge_sort</span>(q, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第二讲-数据结构"><a href="#第二讲-数据结构" class="headerlink" title="第二讲 数据结构"></a>第二讲 数据结构</h1><blockquote><p>完成情况：17&#x2F;17<br>包括单链表，双链表，栈，队列，单调栈，单调队列，KMP，Trie，并查集，堆，哈希表等内容。</p></blockquote><h1 id="第三讲-搜索与图论"><a href="#第三讲-搜索与图论" class="headerlink" title="第三讲 搜索与图论"></a>第三讲 搜索与图论</h1><blockquote><p>完成情况：17&#x2F;17<br>包括DFS，BFS，树与图的深度优先遍历，树与图的广度优先遍历，拓扑排序，Dijkstra，bellman-ford，spfa，Floyd，Prim，Kruskal，染色法判定二分图，匈牙利算法等内容。</p></blockquote><h1 id="第四讲-数学知识"><a href="#第四讲-数学知识" class="headerlink" title="第四讲 数学知识"></a>第四讲 数学知识</h1><blockquote><p>完成情况：26&#x2F;26<br>包括质数，约数，欧拉函数，快速幂，扩展欧几里得算法，中国剩余定理，高斯消元，求组合数，容斥原理，博弈论等内容。</p></blockquote><h1 id="第五讲-动态规划"><a href="#第五讲-动态规划" class="headerlink" title="第五讲 动态规划"></a>第五讲 动态规划</h1><blockquote><p>完成情况：11&#x2F;18<br>包括背包问题，线性DP，区间DP，计数类DP，数位统计DP，状态压缩DP，树形DP，记忆化搜索等内容。</p></blockquote><h1 id="第六讲-贪心"><a href="#第六讲-贪心" class="headerlink" title="第六讲 贪心"></a>第六讲 贪心</h1><blockquote><p>完成情况：2&#x2F;8<br>包括区间问题，Huffman树，排序不等式，绝对值不等式，推公式等内容。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;powered by &lt;a href=&quot;https://www.acwing.com/&quot;&gt;AcWing&lt;/a&gt;&lt;br&gt;本文总结记录了我的&lt;a href=&quot;https://www.acwing.com/activity/content/11/&quot;&gt;基础</summary>
      
    
    
    
    <category term="我的基础算法笔记" scheme="https://touristdaughter.cyou/categories/%E6%88%91%E7%9A%84%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://touristdaughter.cyou/tags/C/"/>
    
    <category term="AcWing" scheme="https://touristdaughter.cyou/tags/AcWing/"/>
    
    <category term="Algorithm" scheme="https://touristdaughter.cyou/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>0.配置sublime c++环境</title>
    <link href="https://touristdaughter.cyou/2025/04/16/0.%E9%85%8D%E7%BD%AEsublime%20c++%E7%8E%AF%E5%A2%83/"/>
    <id>https://touristdaughter.cyou/2025/04/16/0.%E9%85%8D%E7%BD%AEsublime%20c++%E7%8E%AF%E5%A2%83/</id>
    <published>2025-04-16T13:24:23.118Z</published>
    <updated>2025-04-17T08:17:21.857Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-配置sublime-c-环境"><a href="#0-配置sublime-c-环境" class="headerlink" title="0.配置sublime c++环境"></a>0.配置sublime c++环境</h1><h2 id="一、下载MinGW文件"><a href="#一、下载MinGW文件" class="headerlink" title="一、下载MinGW文件"></a>一、下载<code>MinGW</code>文件</h2><h3 id="1-下载mingw-get-setup"><a href="#1-下载mingw-get-setup" class="headerlink" title="1.下载mingw-get-setup"></a>1.下载<code>mingw-get-setup</code></h3><p>网址：<code>https://sourceforge.net/projects/mingw/</code><br>由于这是境外网站，请自行解决连接问题（下载的文件仅84.5KB）<br><img src="/img/sub1.png"></p><h3 id="2-双击运行，一直continue"><a href="#2-双击运行，一直continue" class="headerlink" title="2.双击运行，一直continue"></a>2.双击运行，一直<code>continue</code></h3><p><img src="/img/sub2.png"></p><h3 id="3-安装完成后显示MinGW-Installation-Manager的页面"><a href="#3-安装完成后显示MinGW-Installation-Manager的页面" class="headerlink" title="3.安装完成后显示MinGW Installation Manager的页面"></a>3.安装完成后显示<code>MinGW Installation Manager</code>的页面</h3><p><img src="/img/sub3.png"></p><h3 id="4-单击mingw32-base和mingw-gcc-g-左边的方框，选择Mark-for-installation"><a href="#4-单击mingw32-base和mingw-gcc-g-左边的方框，选择Mark-for-installation" class="headerlink" title="4.单击mingw32-base和mingw-gcc-g++左边的方框，选择Mark for installation"></a>4.单击<code>mingw32-base</code>和<code>mingw-gcc-g++</code>左边的方框，选择<code>Mark for installation</code></h3><p><img src="/img/sub4.png"></p><h3 id="5-单击菜单栏左上角Installation，选择Apply-Changes"><a href="#5-单击菜单栏左上角Installation，选择Apply-Changes" class="headerlink" title="5.单击菜单栏左上角Installation，选择Apply Changes"></a>5.单击菜单栏左上角<code>Installation</code>，选择<code>Apply Changes</code></h3><p><img src="/img/sub5.png"></p><h3 id="6-在弹出来的界面单击Apply"><a href="#6-在弹出来的界面单击Apply" class="headerlink" title="6.在弹出来的界面单击Apply"></a>6.在弹出来的界面单击<code>Apply</code></h3><p><img src="/img/sub6.png"></p><h3 id="7、等待下载完成-下载完成，Close退出"><a href="#7、等待下载完成-下载完成，Close退出" class="headerlink" title="7、等待下载完成;下载完成，Close退出"></a>7、等待下载完成;下载完成，<code>Close</code>退出</h3><p><img src="/img/sub7.png"></p><h2 id="二、添加环境变量（以Win11为例）"><a href="#二、添加环境变量（以Win11为例）" class="headerlink" title="二、添加环境变量（以Win11为例）"></a>二、添加环境变量（以Win11为例）</h2><h3 id="1-右键此电脑，选择属性。"><a href="#1-右键此电脑，选择属性。" class="headerlink" title="1.右键此电脑，选择属性。"></a>1.右键此电脑，选择属性。</h3><p><img src="/img/sub8.png"></p><h3 id="2-在相关链接里选择高级系统设置"><a href="#2-在相关链接里选择高级系统设置" class="headerlink" title="2.在相关链接里选择高级系统设置"></a>2.在相关链接里选择高级系统设置</h3><p><img src="/img/sub9.png"></p><h3 id="3-在弹出的窗口单击环境变量"><a href="#3-在弹出的窗口单击环境变量" class="headerlink" title="3.在弹出的窗口单击环境变量"></a>3.在弹出的窗口单击环境变量</h3><p><img src="/img/sub10.png"></p><h3 id="4-单击选中系统变量里的Path，然后单击编辑"><a href="#4-单击选中系统变量里的Path，然后单击编辑" class="headerlink" title="4.单击选中系统变量里的Path，然后单击编辑"></a>4.单击选中系统变量里的<code>Path</code>，然后单击编辑</h3><p><img src="/img/sub11.png"></p><h3 id="5-新建path"><a href="#5-新建path" class="headerlink" title="5.新建path"></a>5.新建path</h3><h4 id="①在弹出的窗口单击新建，并输入你安装MingGW的地址，后面加一个-bin（二进制文件）"><a href="#①在弹出的窗口单击新建，并输入你安装MingGW的地址，后面加一个-bin（二进制文件）" class="headerlink" title="①在弹出的窗口单击新建，并输入你安装MingGW的地址，后面加一个/bin（二进制文件）"></a>①在弹出的窗口单击新建，并输入你安装<code>MingGW</code>的地址，后面加一个<code>/bin</code>（二进制文件）</h4><p>我是<code>C:\MinGW\bin</code><br><img src="/img/sub12.png"></p><h4 id="②连续点击确定以保存刚才的操作"><a href="#②连续点击确定以保存刚才的操作" class="headerlink" title="②连续点击确定以保存刚才的操作"></a>②连续点击确定以保存刚才的操作</h4><h3 id="6-右击Win徽标键，选择Windows-终端（管理员），输入gcc-v"><a href="#6-右击Win徽标键，选择Windows-终端（管理员），输入gcc-v" class="headerlink" title="6.右击Win徽标键，选择Windows 终端（管理员），输入gcc -v"></a>6.右击<code>Win</code>徽标键，选择<code>Windows 终端（管理员）</code>，输入<code>gcc -v</code></h3><p><img src="/img/sub13.png"></p><h4 id="如果有以下样式反馈说明环境变量配置成功"><a href="#如果有以下样式反馈说明环境变量配置成功" class="headerlink" title="如果有以下样式反馈说明环境变量配置成功"></a>如果有以下样式反馈说明环境变量配置成功</h4><p><img src="/img/sub14.png"></p><h4 id="如果出现以下内容，则返回一-5-步骤-重新Apply"><a href="#如果出现以下内容，则返回一-5-步骤-重新Apply" class="headerlink" title="如果出现以下内容，则返回一.5.步骤 重新Apply"></a>如果出现以下内容，则返回<code>一.5.</code>步骤 重新<code>Apply</code></h4><p><img src="/img/sub15.png"></p><h2 id="三、配置Sublime-Text"><a href="#三、配置Sublime-Text" class="headerlink" title="三、配置Sublime Text"></a>三、配置Sublime Text</h2><h3 id="1-下载并安装Sublime"><a href="#1-下载并安装Sublime" class="headerlink" title="1.下载并安装Sublime"></a>1.下载并安装<code>Sublime</code></h3><p>用谷歌搜索官网（因为有些网站域名可能会变），此处附上官网：<code>https://www.sublimetext.com/</code><br>不演示安装过程，中途勾选<code>add to explorer context menu</code>，意思是右键菜单会出现“Open with Sublime Text”（用Sublime打开）的选项</p><h3 id="2-找到你刚才设置的Sublime-Text安装目录，打开sublime-text-exe（sublime本体）"><a href="#2-找到你刚才设置的Sublime-Text安装目录，打开sublime-text-exe（sublime本体）" class="headerlink" title="2.找到你刚才设置的Sublime Text安装目录，打开sublime_text.exe（sublime本体）"></a>2.找到你刚才设置的<code>Sublime Text</code>安装目录，打开<code>sublime_text.exe</code>（sublime本体）</h3><p><img src="/img/sub16.png"></p><h3 id="3-单击菜单栏的Tools，选择Build-System-New-Build-System"><a href="#3-单击菜单栏的Tools，选择Build-System-New-Build-System" class="headerlink" title="3.单击菜单栏的Tools，选择Build System - New Build System"></a>3.单击菜单栏的<code>Tools</code>，选择<code>Build System</code> - <code>New Build System</code></h3><p><img src="/img/sub17.png"></p><h3 id="4-用以下代码替换untitled-sublime-build文件中的所有内容"><a href="#4-用以下代码替换untitled-sublime-build文件中的所有内容" class="headerlink" title="4.用以下代码替换untitled.sublime-build文件中的所有内容"></a>4.用以下代码替换<code>untitled.sublime-build</code>文件中的所有内容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;cmd&quot;: [&quot;g++&quot;, &quot;-Wall&quot;, &quot;$&#123;file&#125;&quot;,&quot;-std=c++11&quot;, &quot;-fexec-charset=gbk&quot;, &quot;-o&quot;,&quot;$&#123;file_path&#125;/$&#123;file_base_name&#125;&quot;],</span><br><span class="line">&quot;file_regex&quot;: &quot;^(..[^:]*):([0-9]+):?([0-9]+)?:?(.*)$&quot;,</span><br><span class="line">&quot;working_dir&quot;: &quot;$&#123;file_path&#125;&quot;,</span><br><span class="line">&quot;selector&quot;: &quot;source.c, source.c++&quot;,</span><br><span class="line">&quot;shell&quot;: true,</span><br><span class="line">&quot;encoding&quot;:&quot;cp936&quot;,</span><br><span class="line">&quot;variants&quot;:</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;Compile Only&quot;,</span><br><span class="line">&quot;cmd&quot;: [&quot;cmd&quot;,&quot;/C&quot;,&quot;g++&quot;, &quot;-Wall&quot;, &quot;$&#123;file&#125;&quot;,&quot;-std=c++11&quot;, &quot;-fexec-charset=gbk&quot;, &quot;-o&quot;,&quot;$&#123;file_path&#125;/$&#123;file_base_name&#125;&quot;],</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;Run Only&quot;,</span><br><span class="line">&quot;cmd&quot;: [&quot;start&quot;,&quot;cmd&quot;,&quot;/c&quot;, &quot;$&#123;file_base_name&#125; &amp; echo. &amp; pause&quot;],</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;Compile &amp; Run&quot;,</span><br><span class="line">&quot;cmd&quot;: [&quot;cmd&quot;,&quot;/C&quot;,&quot;g++&quot;, &quot;-Wall&quot;, &quot;$&#123;file&#125;&quot;,&quot;-std=c++11&quot;, &quot;-fexec-charset=gbk&quot;, &quot;-o&quot;,&quot;$&#123;file_path&#125;/$&#123;file_base_name&#125;&quot;, &quot;&amp;&amp;&quot;,&quot;start&quot;,&quot;cmd&quot;,&quot;/c&quot;, &quot;$&#123;file_base_name&#125; &amp; echo. &amp; pause&quot;],</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-Ctrl-S保存，命名文件为CPP-sublime-build"><a href="#5-Ctrl-S保存，命名文件为CPP-sublime-build" class="headerlink" title="5.Ctrl + S保存，命名文件为CPP.sublime-build"></a>5.<code>Ctrl + S</code>保存，命名文件为<code>CPP.sublime-build</code></h3><p><img src="/img/sub18.png"></p><h3 id="6-在Tools-Build-System中选择CPP（你刚才设置的文件名）"><a href="#6-在Tools-Build-System中选择CPP（你刚才设置的文件名）" class="headerlink" title="6.在Tools-Build System中选择CPP（你刚才设置的文件名）"></a>6.在<code>Tools</code>-<code>Build System</code>中选择<code>CPP</code>（你刚才设置的文件名）</h3><p><img src="/img/sub19.png"></p><h3 id="7-用sublime打开一个-cpp文件，选择Tools-Build-With"><a href="#7-用sublime打开一个-cpp文件，选择Tools-Build-With" class="headerlink" title="7.用sublime打开一个.cpp文件，选择Tools - Build With..."></a>7.用sublime打开一个<code>.cpp</code>文件，选择<code>Tools</code> - <code>Build With...</code></h3><p><img src="/img/sub20.png"></p><h3 id="8-此时有几个编译或运行选项，点击编译并运行。"><a href="#8-此时有几个编译或运行选项，点击编译并运行。" class="headerlink" title="8.此时有几个编译或运行选项，点击编译并运行。"></a>8.此时有几个编译或运行选项，点击编译并运行。</h3><p><img src="/img/sub21.png"></p><blockquote><p>趁着编译的10几秒，感兴趣的同学可以顺便在菜单栏的<code>preferences</code>里面把主题换了qaq，我换的主题是<code>Monokai</code></p></blockquote><h3 id="9-运行结果如图。"><a href="#9-运行结果如图。" class="headerlink" title="9.运行结果如图。"></a>9.运行结果如图。</h3><p><img src="/img/sub22.png"></p><h1 id="Well-done"><a href="#Well-done" class="headerlink" title="Well done."></a>Well done.</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0-配置sublime-c-环境&quot;&gt;&lt;a href=&quot;#0-配置sublime-c-环境&quot; class=&quot;headerlink&quot; title=&quot;0.配置sublime c++环境&quot;&gt;&lt;/a&gt;0.配置sublime c++环境&lt;/h1&gt;&lt;h2 id=&quot;一、下载Min</summary>
      
    
    
    
    <category term="我的基础算法笔记" scheme="https://touristdaughter.cyou/categories/%E6%88%91%E7%9A%84%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Sublime" scheme="https://touristdaughter.cyou/tags/Sublime/"/>
    
    <category term="C++" scheme="https://touristdaughter.cyou/tags/C/"/>
    
    <category term="IDE" scheme="https://touristdaughter.cyou/tags/IDE/"/>
    
  </entry>
  
  <entry>
    <title>hexo+butterfly使用数学公式katex</title>
    <link href="https://touristdaughter.cyou/2025/04/13/hexo+butterfly%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8Fkatex/"/>
    <id>https://touristdaughter.cyou/2025/04/13/hexo+butterfly%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8Fkatex/</id>
    <published>2025-04-13T14:55:01.984Z</published>
    <updated>2025-04-13T15:13:19.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo-butterfly使用数学公式katex"><a href="#hexo-butterfly使用数学公式katex" class="headerlink" title="hexo+butterfly使用数学公式katex"></a>hexo+butterfly使用数学公式katex</h1><h2 id="1-更换插件"><a href="#1-更换插件" class="headerlink" title="1.更换插件"></a>1.更换插件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save # 卸载 marked 插件</span><br><span class="line">npm un hexo-renderer-kramed --save # 卸载 kramed 插件</span><br><span class="line">npm i hexo-renderer-markdown-it --save # 安装渲染插件</span><br><span class="line">npm install @neilsustc/markdown-it-katex --save # 安装katex插件</span><br></pre></td></tr></table></figure><h2 id="2-butterfly配置启动latex插件"><a href="#2-butterfly配置启动latex插件" class="headerlink" title="2.butterfly配置启动latex插件"></a>2.butterfly配置启动latex插件</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Math (數學)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># KaTeX</span></span><br><span class="line"><span class="attr">katex:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">hide_scrollbar:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="3-博客yml配置中增加"><a href="#3-博客yml配置中增加" class="headerlink" title="3.博客yml配置中增加"></a>3.博客yml配置中增加</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line"> <span class="attr">plugins:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">     <span class="attr">name:</span> <span class="string">&#x27;@neilsustc/markdown-it-katex&#x27;</span></span><br><span class="line">     <span class="attr">options:</span></span><br><span class="line">       <span class="attr">strict:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="4-博客页面配置开启latex"><a href="#4-博客页面配置开启latex" class="headerlink" title="4.博客页面配置开启latex"></a>4.博客页面配置开启latex</h2><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: bert详解</span><br><span class="line">date: 2025-04-13 14:51:21</span><br><span class="line">katex: true</span><br><span class="line">category:</span><br><span class="line"><span class="bullet">  -</span> ai</span><br><span class="line">tag:</span><br><span class="line"><span class="section">  - ai</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h2 id="5-letex语法如下："><a href="#5-letex语法如下：" class="headerlink" title="5.letex语法如下："></a>5.letex语法如下：</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$concurrency = cost_\text&#123;avg&#125; \times qps \quad (1)$</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;equation&#125;</span><br><span class="line">\mathcal&#123;F&#125; = \begin&#123;cases&#125;</span><br><span class="line">    \infty &amp; \text&#123;if &#125; \mathcal&#123;M&#125;_&#123;measure&#125; &lt; \alpha \times \mathcal&#123;M&#125;_&#123;expect&#125; \\</span><br><span class="line">    \mathcal&#123;M&#125;_\text&#123;expect&#125; / \mathcal&#123;M&#125;_\text&#123;measure&#125; &amp; \text&#123;if &#125; \alpha \times \mathcal&#123;M&#125;_&#123;expect&#125; &lt; \mathcal&#123;M&#125;_&#123;measure&#125; &lt; \mathcal&#123;M&#125;_&#123;expect&#125; \\</span><br><span class="line">    \sqrt&#123;\frac&#123;\mathcal&#123;M&#125;_&#123;expect&#125;&#125;&#123;\mathcal&#123;M&#125;_&#123;measure&#125;&#125;&#125; &amp; \text&#123;if &#125; \mathcal&#123;M&#125;_&#123;measure&#125; \ge \mathcal&#123;M&#125;_&#123;expect&#125;</span><br><span class="line">\end&#123;cases&#125;</span><br><span class="line">\end&#123;equation&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo-butterfly使用数学公式katex&quot;&gt;&lt;a href=&quot;#hexo-butterfly使用数学公式katex&quot; class=&quot;headerlink&quot; title=&quot;hexo+butterfly使用数学公式katex&quot;&gt;&lt;/a&gt;hexo+butter</summary>
      
    
    
    
    <category term="关于本站、博客搭建" scheme="https://touristdaughter.cyou/categories/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E3%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Hexo" scheme="https://touristdaughter.cyou/tags/Hexo/"/>
    
    <category term="Butterfly" scheme="https://touristdaughter.cyou/tags/Butterfly/"/>
    
  </entry>
  
  <entry>
    <title>【段子】千禧年难题奶茶化</title>
    <link href="https://touristdaughter.cyou/2025/04/13/[%E6%AE%B5%E5%AD%90]%E5%8D%83%E7%A6%A7%E5%B9%B4%E9%9A%BE%E9%A2%98%E5%A5%B6%E8%8C%B6%E5%8C%96/"/>
    <id>https://touristdaughter.cyou/2025/04/13/[%E6%AE%B5%E5%AD%90]%E5%8D%83%E7%A6%A7%E5%B9%B4%E9%9A%BE%E9%A2%98%E5%A5%B6%E8%8C%B6%E5%8C%96/</id>
    <published>2025-04-13T09:26:57.809Z</published>
    <updated>2025-04-13T14:38:39.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【段子】千禧年难题奶茶化"><a href="#【段子】千禧年难题奶茶化" class="headerlink" title="【段子】千禧年难题奶茶化"></a>【段子】千禧年难题奶茶化</h1><h4 id="潜入克雷数学研究所档案室，你掏出毛笔在《七大难题》羊皮纸上狂草："><a href="#潜入克雷数学研究所档案室，你掏出毛笔在《七大难题》羊皮纸上狂草：" class="headerlink" title="潜入克雷数学研究所档案室，你掏出毛笔在《七大难题》羊皮纸上狂草："></a>潜入克雷数学研究所档案室，你掏出毛笔在《七大难题》羊皮纸上狂草：</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第八难题：奶茶最优搅拌定理  </span><br><span class="line">设珍珠体积为V，奶茶密度ρ，吸管半径r，则存在唯一搅拌次数n，使得  </span><br><span class="line">n = ⌈(3Vρ)/(π r²)⌉ + ϵ  </span><br><span class="line">其中ϵ为口味偏好修正项（ϵ∈&#123;0,1&#125;）  </span><br><span class="line">悬赏：终身奶茶免单权</span><br></pre></td></tr></table></figure><h4 id="此刻全球数学家突然集体转向奶茶店，黎曼猜想的证明进度因此延缓13-7-！"><a href="#此刻全球数学家突然集体转向奶茶店，黎曼猜想的证明进度因此延缓13-7-！" class="headerlink" title="此刻全球数学家突然集体转向奶茶店，黎曼猜想的证明进度因此延缓13.7%！"></a>此刻全球数学家突然集体转向奶茶店，黎曼猜想的证明进度因此延缓13.7%！</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【段子】千禧年难题奶茶化&quot;&gt;&lt;a href=&quot;#【段子】千禧年难题奶茶化&quot; class=&quot;headerlink&quot; title=&quot;【段子】千禧年难题奶茶化&quot;&gt;&lt;/a&gt;【段子】千禧年难题奶茶化&lt;/h1&gt;&lt;h4 id=&quot;潜入克雷数学研究所档案室，你掏出毛笔在《七大难题》</summary>
      
    
    
    
    <category term="天赋型选手一句梗，我背了三年" scheme="https://touristdaughter.cyou/categories/%E5%A4%A9%E8%B5%8B%E5%9E%8B%E9%80%89%E6%89%8B%E4%B8%80%E5%8F%A5%E6%A2%97%EF%BC%8C%E6%88%91%E8%83%8C%E4%BA%86%E4%B8%89%E5%B9%B4/"/>
    
    
  </entry>
  
</feed>
